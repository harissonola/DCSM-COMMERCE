{% extends 'base.html.twig' %}

{% block title %}
	Dashboard | {{ prod.name }}
{% endblock %}

{% block body %}
	<!-- Chart.js CDN -->
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@1.0.0"></script>

	<div class="container-fluid py-5 mt-3">
		<canvas id="tradingChart" width="400" height="400"></canvas>
	</div>

	<div>
		<!-- Afficher le statut du bot de minage -->
		{% if app.user and app.user.isMiningBotActive %}
			<p>Votre bot de minage est activé. Le minage se fait automatiquement.</p>
		{% else %}
			<div class="alert alert-danger" role="alert">
				Vous n'avez pas le bot de minage. Vous pouvez miner manuellement, mais vous serez responsable de vos gains/pertes.
			</div>
			<button id="startManualMining" class="btn btn-primary">Démarrer le minage manuel</button>
			<button id="buyMiningBot" class="btn btn-warning">Acheter le bot de minage</button>
		{% endif %}
	</div>
{% endblock %}

{% block customScript %}
	<script>
	    document.addEventListener('DOMContentLoaded', function () {
	        const ctx = document.getElementById('tradingChart').getContext('2d');
	        
	        // Vérification si l'élément Canvas existe
	        if (!ctx) {
	            console.error("❌ Élément 'tradingChart' introuvable !");
	            return;
	        }
	        
	        // Utiliser le JSON déjà encodé depuis le contrôleur
	        let chartData;
	        try {
	            chartData = JSON.parse('{{ chartData|raw }}');
	        } catch (e) {
	            console.error("❌ Erreur de parsing JSON :", e);
	            return;
	        }

	        console.log("✅ Données reçues :", chartData);

	        // Vérifier si les données sont valides
	        if (!Array.isArray(chartData) || chartData.length === 0) {
	            console.warn("⚠️ Les données du graphique sont vides ou mal formatées !");
	            return;
	        }

	        // Transformation des données pour Chart.js
	        chartData = chartData.map(item => {
	            if (!item.x || !item.y) {
	                console.warn("⚠️ Donnée incorrecte détectée :", item);
	                return null;
	            }
	            return {
	                x: new Date(item.x),
	                y: parseFloat(item.y)
	            };
	        }).filter(Boolean); // Supprime les entrées invalides

	        // Vérification après transformation
	        console.log("✅ Données formatées :", chartData);

	        // Création du graphique
	        new Chart(ctx, {
	            type: 'line',
	            data: {
	                datasets: [{
	                    label: '{{ prod.name }}',
	                    data: chartData,
	                    borderColor: 'blue',
	                    borderWidth: 2,
	                    pointRadius: 2,
	                    tension: 0.2
	                }]
	            },
	            options: {
	                responsive: true,
	                plugins: {
	                    legend: { display: true }
	                },
	                scales: {
	                    x: {
	                        type: 'time',
	                        time: { unit: 'day' },
	                        title: { display: true, text: 'Date' }
	                    },
	                    y: {
	                        beginAtZero: false,
	                        title: { display: true, text: 'Valeur' }
	                    }
	                }
	            }
	        });
	    });
	</script>
{% endblock %}