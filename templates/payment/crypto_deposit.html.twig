{% extends 'base.html.twig' %}

{% block title %}Dépôt Crypto
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<style>
		.deposit-container {
			max-width: 500px;
			margin: 2rem auto;
			background: rgba(255, 255, 255, 0.1);
			backdrop-filter: blur(20px);
			border-radius: 1.5rem;
			padding: 2rem;
			box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
			border: 1px solid rgba(255, 255, 255, 0.1);
		}

		.network-badge {
			background: rgba(0, 0, 0, 0.2);
			padding: 0.5rem 1rem;
			border-radius: 2rem;
			display: inline-flex;
			align-items: center;
		}

		.network-icon {
			width: 24px;
			height: 24px;
			margin-right: 0.5rem;
		}
	</style>
{% endblock %}

{% block body %}
	<div class="deposit-container">
		<div class="text-center mb-4">
			<h3>Dépôt en
				{{ network }}</h3>
			<div class="network-badge">
				<img src="{{ asset('img/crypto/' ~ transaction.method|replace({'crypto_': ''})|lower ~ '.png') }}" alt="{{ network }}" class="network-icon" onerror="this.src='{{ asset('img/crypto/default.png') }}'">
				<span>{{ network }}</span>
			</div>
		</div>

		<div class="text-center mb-4">
			<h4>Montant à déposer : ${{ amount|number_format(2) }}</h4>
		</div>

		<div class="text-center mb-4">
			<img src="{{ qrCodeUrl }}" alt="QR Code pour {{ depositAddress }}" class="img-fluid" style="max-width: 300px;">
			<p class="mt-2 text-muted">Scanner pour envoyer depuis un wallet mobile</p>
		</div>

		<div class="mb-4">
			<h5 class="text-center">Adresse de dépôt</h5>
			<div class="input-group mb-2">
				<input type="text" class="form-control bg-transparent text-light" value="{{ depositAddress }}" id="depositAddress" readonly>
				<button class="btn btn-outline-light" onclick="copyToClipboard()">
					<i class="fas fa-copy"></i>
				</button>
			</div>
			<small class="text-muted d-block text-center">
				<i class="fas fa-exclamation-circle"></i>
				N'envoyez que
				{{ network }}
				à cette adresse
			</small>
		</div>

		<div class="alert alert-info">
			<div class="d-flex justify-content-between align-items-center">
				<span>
					<i class="fas fa-clock"></i>
					Temps restant :</span>
				<span id="countdown"></span>
			</div>
			<div class="progress mt-2" style="height: 5px;">
				<div id="progressBar" class="progress-bar" role="progressbar"></div>
			</div>
		</div>

		<div id="statusAlert" class="alert alert-warning" style="display: none;">
			<div class="d-flex align-items-center">
				<i class="fas fa-spinner fa-spin me-2"></i>
				<span id="statusText">En attente du dépôt...</span>
			</div>
		</div>

		<div class="mt-4">
			<h5>Instructions :</h5>
			<ol>
				<li>Copiez l'adresse ou scannez le QR code</li>
				<li>Envoyez exactement
					<strong>${{ amount|number_format(2) }}</strong>
					en
					{{ network }}</li>
				<li>Le système détectera automatiquement votre dépôt</li>
				<li>Votre solde sera crédité après confirmation</li>
			</ol>
			<div class="alert alert-danger mt-3">
				<i class="fas fa-exclamation-triangle"></i>
				N'envoyez pas d'autres cryptomonnaies à cette adresse, elles seraient perdues.
			</div>
		</div>
	</div>

	<input type="hidden" id="initialExpiration" value="{{ initialExpiration }}">
	<input type="hidden" id="csrfToken" value="{{ csrf_token('crypto_deposit') }}">
	<input
	type="hidden" id="checkUrl" value="{{ path('app_check_crypto_deposit', {'id': transaction.id}) }}">

 <script>
document.addEventListener('DOMContentLoaded', function() {
    // Compte à rebours
    const initialExpiration = parseInt(document.getElementById('initialExpiration').value);
    const storageKey = 'depositExpiration_{{ transaction.id }}';
    
    let remainingTime = localStorage.getItem(storageKey);
    if (!remainingTime || remainingTime > initialExpiration) {
        remainingTime = initialExpiration;
        localStorage.setItem(storageKey, remainingTime);
    }
    
    updateCountdown(remainingTime);
    
    function updateCountdown(seconds) {
        if (seconds <= 0) {
            document.getElementById('countdown').innerHTML = 'Expiré';
            document.getElementById('progressBar').style.width = '100%';
            document.getElementById('statusAlert').style.display = 'none';
            localStorage.removeItem(storageKey);
            return;
        }
        
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        
        document.getElementById('countdown').textContent = `${hours}h ${minutes}m ${secs}s`;
        const progressPercent = 100 - (seconds / initialExpiration * 100);
        document.getElementById('progressBar').style.width = `${progressPercent}%`;
        
        localStorage.setItem(storageKey, seconds - 1);
        setTimeout(() => updateCountdown(seconds - 1), 1000);
    }
    
    // Vérification automatique du dépôt
    checkDepositStatus();
});

function copyToClipboard() {
    const address = document.getElementById('depositAddress');
    address.select();
    document.execCommand('copy');
    
    // Afficher une notification
    const toast = new bootstrap.Toast(document.createElement('div'));
    toast._element.className = 'toast align-items-center text-white bg-success border-0';
    toast._element.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">Adresse copiée !</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    `;
    document.body.appendChild(toast._element);
    toast.show();
    
    setTimeout(() => {
        toast.dispose();
        document.body.removeChild(toast._element);
    }, 3000);
}

function checkDepositStatus() {
    const statusAlert = document.getElementById('statusAlert');
    const statusText = document.getElementById('statusText');
    
    statusAlert.style.display = 'flex';
    
    fetch(document.getElementById('checkUrl').value, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': document.getElementById('csrfToken').value
        },
        body: JSON.stringify({})
    })
    .then(response => {
        if (!response.ok) throw new Error('Erreur réseau');
        return response.json();
    })
    .then(data => {
        if (data.status === 'completed') {
            statusAlert.className = 'alert alert-success';
            statusText.innerHTML = '<i class="fas fa-check-circle me-2"></i> Dépôt confirmé !';
            localStorage.removeItem('depositExpiration_{{ transaction.id }}');
        } else if (data.status === 'expired') {
            statusAlert.className = 'alert alert-danger';
            statusText.innerHTML = '<i class="fas fa-exclamation-circle me-2"></i> Dépôt expiré';
        } else {
            setTimeout(checkDepositStatus, 10000);
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        setTimeout(checkDepositStatus, 30000);
    });
}
</script>
{% endblock %}
