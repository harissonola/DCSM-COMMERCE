{% extends 'base.html.twig' %}

{% block title %}Dépôt Crypto
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
	<style>
		.deposit-container {
			max-width: 500px;
			margin: 2rem auto;
			background: rgba(255, 255, 255, 0.1);
			backdrop-filter: blur(20px);
			border-radius: 1.5rem;
			padding: 2rem;
			box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
			border: 1px solid rgba(255, 255, 255, 0.1);
			animation: fadeIn 0.5s ease-out;
		}

		@keyframes fadeIn {
			from {
				opacity: 0;
				transform: translateY(20px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		.network-badge {
			background: linear-gradient(90deg, rgba(0, 0, 0, 0.2) 0%, rgba(0, 0, 0, 0.1) 100%);
			padding: 0.5rem 1rem;
			border-radius: 2rem;
			display: inline-flex;
			align-items: center;
			transition: all 0.3s ease;
			border: 1px solid rgba(255, 255, 255, 0.1);
		}

		.network-badge:hover {
			transform: scale(1.05);
			box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
		}

		.network-icon {
			width: 24px;
			height: 24px;
			margin-right: 0.5rem;
			object-fit: contain;
			border-radius: 50%;
		}

		.amount-display {
			font-size: 2rem;
			font-weight: bold;
			background: linear-gradient(90deg, #6200ff, #9b4dff);
			-webkit-background-clip: text;
			background-clip: text;
			color: transparent;
			margin: 1rem 0;
			animation: pulse 2s infinite;
		}

		@keyframes pulse {
			0% {
				transform: scale(1);
			}
			50% {
				transform: scale(1.05);
			}
			100% {
				transform: scale(1);
			}
		}

		.qr-container {
			background: white;
			padding: 1rem;
			border-radius: 1rem;
			display: inline-block;
			margin: 1rem 0;
			box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
			transition: all 0.3s ease;
		}

		.qr-container:hover {
			transform: scale(1.03);
		}

		.address-input {
			background: rgba(0, 0, 0, 0.2) !important;
			border: 1px solid rgba(255, 255, 255, 0.1) !important;
			color: white !important;
			font-family: monospace;
		}

		.copy-btn {
			transition: all 0.3s ease;
		}

		.copy-btn:hover {
			background: #6200ff !important;
			transform: scale(1.05);
		}

		#progressBar {
			transition: width 1s linear;
		}

		.instruction-step {
			margin-bottom: 0.5rem;
			padding-left: 0.5rem;
			border-left: 3px solid #6200ff;
			transition: all 0.3s ease;
		}

		.instruction-step:hover {
			transform: translateX(5px);
			background: rgba(98, 0, 255, 0.1);
		}

		.alert-warning {
			background: rgba(255, 193, 7, 0.1);
			border-color: rgba(255, 193, 7, 0.3);
		}

		.alert-danger {
			background: rgba(220, 53, 69, 0.1);
			border-color: rgba(220, 53, 69, 0.3);
		}

		.alert-success {
			background: rgba(25, 135, 84, 0.1);
			border-color: rgba(25, 135, 84, 0.3);
		}
	</style>
{% endblock %}

{% block body %}
	<div class="deposit-container animate__animated animate__fadeIn">
		<div class="text-center mb-4">
			<h3 class="animate__animated animate__fadeInDown">Dépôt en
				{{ network }}</h3>
			<div class="network-badge animate__animated animate__fadeIn animate__delay-1s">
				{% set cryptoImages = {
                    'BTC': 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',
                    'ETH': 'https://cryptologos.cc/logos/ethereum-eth-logo.png',
                    'USDT': 'https://cryptologos.cc/logos/tether-usdt-logo.png',
                    'BNB': 'https://cryptologos.cc/logos/bnb-bnb-logo.png',
                    'XRP': 'https://cryptologos.cc/logos/xrp-xrp-logo.png',
                    'SOL': 'https://cryptologos.cc/logos/solana-sol-logo.png',
                    'DOGE': 'https://cryptologos.cc/logos/dogecoin-doge-logo.png',
                    'ADA': 'https://cryptologos.cc/logos/cardano-ada-logo.png'
                } %}

				{% set cryptoKey = transaction.method|replace({'crypto_': ''})|upper %}
				<img src="{{ cryptoImages[cryptoKey] ?? 'https://cryptologos.cc/logos/bitcoin-btc-logo.png' }}" alt="{{ network }}" class="network-icon">
				<span>{{ network }}</span>
			</div>
		</div>

		<div class="text-center mb-4 animate__animated animate__fadeIn animate__delay-1s">
			<div class="amount-display">${{ amount|number_format(2) }}</div>
			<small class="text-muted">Montant à déposer</small>
		</div>

		<div class="text-center mb-4 animate__animated animate__fadeIn animate__delay-2s">
			<div class="qr-container">
				<img src="{{ qrCodeUrl }}" alt="QR Code pour {{ depositAddress }}" style="width: 200px; height: 200px;">
			</div>
			<p class="mt-2 text-muted">Scanner pour envoyer depuis un wallet mobile</p>
		</div>

		<div class="mb-4 animate__animated animate__fadeIn animate__delay-2s">
			<h5 class="text-center">Adresse de dépôt</h5>
			<div class="input-group mb-2">
				<input type="text" class="form-control address-input" value="{{ depositAddress }}" id="depositAddress" readonly>
				<button class="btn btn-outline-light copy-btn" onclick="copyToClipboard()">
					<i class="fas fa-copy"></i>
					Copier
				</button>
			</div>
			<small class="text-muted d-block text-center">
				<i class="fas fa-exclamation-circle"></i>
				N'envoyez que
				{{ network }}
				à cette adresse
			</small>
		</div>

		<div class="alert alert-info animate__animated animate__fadeIn animate__delay-3s">
			<div class="d-flex justify-content-between align-items-center">
				<span>
					<i class="fas fa-clock"></i>
					Temps restant :</span>
				<span id="countdown" class="fw-bold"></span>
			</div>
			<div class="progress mt-2" style="height: 5px;">
				<div id="progressBar" class="progress-bar bg-gradient" role="progressbar" style="background: linear-gradient(90deg, #6200ff, #9b4dff);"></div>
			</div>
		</div>

		<div id="statusAlert" class="alert alert-warning animate__animated animate__fadeIn animate__delay-3s" style="display: none;">
			<div class="d-flex align-items-center">
				<i class="fas fa-spinner fa-spin me-2"></i>
				<span id="statusText">En attente du dépôt...</span>
			</div>
		</div>

		<div class="mt-4 animate__animated animate__fadeIn animate__delay-4s">
			<h5>
				<i class="fas fa-list-ol me-2"></i>Instructions :</h5>
			<ol class="list-unstyled">
				<li class="instruction-step">1. Copiez l'adresse ou scannez le QR code</li>
				<li class="instruction-step">2. Envoyez exactement
					<strong>${{ amount|number_format(2) }}</strong>
					en
					{{ network }}</li>
				<li class="instruction-step">3. Le système détectera automatiquement votre dépôt</li>
				<li class="instruction-step">4. Votre solde sera crédité après confirmation</li>
			</ol>
			<div class="alert alert-danger mt-3 animate__animated animate__shakeX animate__delay-4s">
				<i class="fas fa-exclamation-triangle me-2"></i>
				N'envoyez pas d'autres cryptomonnaies à cette adresse, elles seraient perdues.
			</div>
		</div>
	</div>

	<input type="hidden" id="initialExpiration" value="{{ initialExpiration }}">
	<input type="hidden" id="csrfToken" value="{{ csrf_token('crypto_deposit') }}">
	<input
	type="hidden" id="checkUrl" value="{{ path('app_check_crypto_deposit', {'id': transaction.id}) }}">

	<!-- Toast notification -->
	<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
		<div id="liveToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
			<div class="d-flex">
				<div class="toast-body">
					<i class="fas fa-check-circle me-2"></i>
					Adresse copiée avec succès !
				</div>
				<button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
			</div>
		</div>
	</div>
{% endblock %}

{% block javascripts %}
	{{ parent() }}
	 <script>
	        document.addEventListener('DOMContentLoaded', function() {
	            // Compte à rebours
	            const initialExpiration = parseInt(document.getElementById('initialExpiration').value);
	            const storageKey = 'depositExpiration_{{ transaction.id }}';
	            
	            let remainingTime = localStorage.getItem(storageKey);
	            if (!remainingTime || remainingTime > initialExpiration) {
	                remainingTime = initialExpiration;
	                localStorage.setItem(storageKey, remainingTime);
	            }
	            
	            updateCountdown(remainingTime);
	            
	            function updateCountdown(seconds) {
	                if (seconds <= 0) {
	                    document.getElementById('countdown').innerHTML = '<span class="text-danger">Expiré</span>';
	                    document.getElementById('progressBar').style.width = '100%';
	                    document.getElementById('statusAlert').style.display = 'none';
	                    localStorage.removeItem(storageKey);
	                    return;
	                }
	                
	                const hours = Math.floor(seconds / 3600);
	                const minutes = Math.floor((seconds % 3600) / 60);
	                const secs = seconds % 60;
	                
	                document.getElementById('countdown').innerHTML = `
	                    <span class="text-primary">${hours}h</span> 
	                    <span class="text-info">${minutes}m</span> 
	                    <span class="text-warning">${secs}s</span>
	                `;
	                const progressPercent = 100 - (seconds / initialExpiration * 100);
	                document.getElementById('progressBar').style.width = `${progressPercent}%`;
	                
	                localStorage.setItem(storageKey, seconds - 1);
	                setTimeout(() => updateCountdown(seconds - 1), 1000);
	            }
	            
	            // Vérification automatique du dépôt
	            checkDepositStatus();
	        });
	
	        function copyToClipboard() {
	            const address = document.getElementById('depositAddress');
	            address.select();
	            document.execCommand('copy');
	            
	            // Afficher une notification toast
	            const toast = new bootstrap.Toast(document.getElementById('liveToast'));
	            toast.show();
	            
	            // Vibrer le bouton
	            navigator.vibrate?.(50);
	        }
	
	        function checkDepositStatus() {
	            const statusAlert = document.getElementById('statusAlert');
	            const statusText = document.getElementById('statusText');
	            
	            statusAlert.style.display = 'flex';
	            
	            fetch(document.getElementById('checkUrl').value, {
	                method: 'POST',
	                headers: {
	                    'Content-Type': 'application/json',
	                    'X-CSRF-TOKEN': document.getElementById('csrfToken').value
	                },
	                body: JSON.stringify({})
	            })
	            .then(response => {
	                if (!response.ok) throw new Error('Erreur réseau');
	                return response.json();
	            })
	            .then(data => {
	                if (data.status === 'completed') {
	                    statusAlert.className = 'alert alert-success';
	                    statusText.innerHTML = '<i class="fas fa-check-circle me-2"></i> Dépôt confirmé ! Redirection en cours...';
	                    localStorage.removeItem('depositExpiration_{{ transaction.id }}');
	                    
	                    // Redirection après 3 secondes
	                    setTimeout(() => {
	                        window.location.href = data.redirectUrl || '/';
	                    }, 3000);
	                } else if (data.status === 'expired') {
	                    statusAlert.className = 'alert alert-danger';
	                    statusText.innerHTML = '<i class="fas fa-exclamation-circle me-2"></i> Dépôt expiré';
	                } else {
	                    setTimeout(checkDepositStatus, 10000);
	                }
	            })
	            .catch(error => {
	                console.error('Erreur:', error);
	                setTimeout(checkDepositStatus, 30000);
	            });
	        }
	    </script>
{% endblock %}
