{% extends 'base.html.twig' %}

{% block title %}
  Dashboard |
  {{ prod.name }}
{% endblock %}

{% block stylesheets %}
  {{ parent() }}
  <style>
    /* Corps en mode sombre */
    body {
      background-color: #121212;
      color: #e0e0e0;
      font-family: 'Helvetica Neue', Arial, sans-serif;
      transition: background-color 0.3s ease, color 0.3s ease;
    }
    
    body.tradingview-style {
      background-color: #131722;
      color: #b2b5be;
    }
    
    .container-fluid {
      padding: 20px;
    }
    
    /* Graphique */
    .chart-container {
      position: relative;
      height: 60vh;
      min-height: 400px;
      margin-bottom: 20px;
    }
    
    #tradingChart,
    #tradingViewChart {
      background: #1e1e1e;
      border-radius: 8px;
      padding: 15px;
      border: 1px solid #333;
    }
    
    .tradingview-style #tradingViewChart {
      background: #131722 !important;
      border-color: #2a2e39;
    }
    
    /* Tooltip */
    .chartjs-tooltip {
      background: #1e1e1e !important;
      border: 1px solid #333;
      border-radius: 4px;
      pointer-events: none;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
      color: #e0e0e0;
      padding: 8px;
    }
    
    .tradingview-style .chartjs-tooltip {
      background: #131722 !important;
      border-color: #2962ff;
      color: #fff;
    }
    
    /* Chargement */
    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(30, 30, 30, 0.7);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 10;
    }
    
    .tradingview-style .loading-overlay {
      background: rgba(19, 23, 34, 0.7);
    }
    
    /* En-tête du graphique */
    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    
    .tradingview-style .chart-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
    
    .chart-price {
      font-size: 2rem;
      font-weight: 500;
    }
    
    .tradingview-style .chart-price {
      color: #fff;
      font-size: 2.5rem;
      font-weight: 700;
    }
    
    .chart-change {
      font-size: 1rem;
      padding: 4px 8px;
      border-radius: 4px;
    }
    
    .tradingview-style .chart-change {
      font-size: 1.2rem;
      padding: 6px 12px;
    }
    
    .positive {
      color: #4caf50;
      background-color: rgba(76, 175, 80, 0.2);
    }
    
    .tradingview-style .positive {
      color: #26a69a;
    }
    
    .negative {
      color: #ef5350;
      background-color: rgba(239, 83, 80, 0.2);
    }
    
    .tradingview-style .negative {
      color: #ef5350;
    }
    
    /* Boutons de plage de temps */
    .time-range-buttons {
      display: flex;
      gap: 8px;
      margin-bottom: 15px;
      flex-wrap: wrap;
    }
    
    .time-range-buttons button {
      background-color: #2e2e2e;
      color: #e0e0e0;
      border: 1px solid #444;
      padding: 6px 12px;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .time-range-buttons button:hover {
      background-color: #3a3a3a;
    }
    
    .time-range-buttons button.active {
      background-color: #1a73e8;
      color: #fff;
      border-color: #1a73e8;
    }
    
    .tradingview-style .time-range-buttons button {
      background-color: #2a2e39;
      color: #b2b5be;
      border-color: #2a2e39;
    }
    
    .tradingview-style .time-range-buttons button.active {
      background-color: #2962ff;
      color: #fff;
      border-color: #2962ff;
    }
    
    /* Cartes */
    .card {
      background-color: #1e1e1e;
      border: none;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
      transition: all 0.3s ease;
      height: 100%;
    }
    
    .tradingview-style .card {
      background-color: #2a2e39;
    }
    
    .card:hover {
      transform: translateY(-3px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.7);
    }
    
    .card-body {
      padding: 15px;
    }
    
    .card-title {
      color: #e0e0e0;
      font-size: 1rem;
      margin-bottom: 0.5rem;
    }
    
    .tradingview-style .card-title {
      color: #b2b5be;
    }
    
    .card-text {
      color: #b0b0b0;
      font-size: 1.25rem;
      font-weight: 500;
    }
    
    .tradingview-style .card-text {
      color: #fff;
      font-weight: 600;
    }
    
    /* Message d'erreur */
    .chart-error {
      display: none;
      color: #ef5350;
      text-align: center;
      padding: 20px;
      background: rgba(239, 83, 80, 0.1);
      border-radius: 8px;
      margin-bottom: 20px;
    }
    
    /* Sélecteur de vue */
    .view-selector {
      display: flex;
      gap: 8px;
      margin-bottom: 15px;
    }
    
    .view-selector button {
      background-color: #2e2e2e;
      color: #e0e0e0;
      border: 1px solid #444;
      padding: 6px 12px;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .view-selector button:hover {
      background-color: #3a3a3a;
    }
    
    .view-selector button.active {
      background-color: #1a73e8;
      color: #fff;
      border-color: #1a73e8;
    }
    
    /* Conteneurs de vue */
    .chart-views {
      display: none;
    }
    
    .chart-views.active {
      display: block;
    }
    
    /* Statistiques TradingView */
    .tradingview-stats .card {
      text-align: center;
    }
    
    .tradingview-stats .card-title {
      font-size: 0.9rem;
      color: #b2b5be;
    }
    
    .tradingview-stats .card-text {
      font-size: 1.1rem;
    }
  </style>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
  <script src="https://cdn.jsdelivr.net/npm/date-fns"></script>
{% endblock %}

{% block body %}
  <div class="container-fluid py-3 mt-3">
    <!-- Sélecteur de vue -->
    <div class="view-selector">
      <button class="view-btn active" data-view="classic">Vue Classique</button>
      <button class="view-btn" data-view="tradingview">Style TradingView</button>
    </div>

    <!-- Message d'erreur -->
    <div id="chartError" class="chart-error">
      <i class="fas fa-exclamation-triangle me-2"></i>
      <span>Impossible de charger les données du graphique. Veuillez rafraîchir la page.</span>
    </div>

    <!-- Vue Classique -->
    <div id="classicView" class="chart-views active">
      <div class="chart-header">
        <div>
          <h3>{{ prod.name }}</h3>
          {% if (chartData.price|length) > 0 %}
            {% set latestPrice = chartData.price[(chartData.price|length) - 1].y %}
            {% set previousPrice = chartData.price[(chartData.price|length) - 2].y ?? latestPrice %}
            {% set priceDiff = latestPrice - previousPrice %}
            {% set pricePercent = priceDiff / previousPrice * 100 %}
            <div class="chart-price">${{ latestPrice|number_format(2) }}</div>
          {% endif %}
        </div>
        {% if (chartData.price|length) > 1 %}
          <div class="chart-change {% if priceDiff >= 0 %}

            {% endif %}">{{ pricePercent|number_format(2) }}% ({{ priceDiff|number_format(2) }})</div>
        {% endif %}
      </div>

      <!-- Boutons de plage de temps -->
      <div class="time-range-buttons">
        <button class="range-btn active" data-range="1d">1J</button>
        <button class="range-btn" data-range="5d">5J</button>
        <button class="range-btn" data-range="1m">1M</button>
        <button class="range-btn" data-range="ytd">YTD</button>
        <button class="range-btn" data-range="1y">1A</button>
        <button class="range-btn" data-range="5y">5A</button>
        <button class="range-btn" data-range="max">MAX</button>
      </div>

      <!-- Conteneur du graphique -->
      <div class="chart-container">
        <div class="loading-overlay" id="chartLoading">
          <div class="spinner-border text-light" role="status">
            <span class="visually-hidden">Chargement...</span>
          </div>
        </div>
        <canvas id="tradingChart"></canvas>
      </div>

      <!-- Cartes d'information -->
      <div class="row mt-3 g-3">
        <div class="col-md-3">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">Dernier cours</h5>
              <p class="card-text">
                {% if (chartData.price|length) > 0 %}
                  ${{ chartData.price[(chartData.price|length) - 1].y|number_format(2) }}
                {% else %}
                  N/A
                {% endif %}
              </p>
            </div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">Ouverture</h5>
              <p class="card-text">
                {% if (chartData.price|length) > 0 %}
                  ${{ chartData.price[0].y|number_format(2) }}
                {% else %}
                  N/A
                {% endif %}
              </p>
            </div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">Variation</h5>
              <p class="card-text">
                {% if (chartData.price|length) > 1 %}
                  {{ priceDiff|number_format(2) }}
                  ({{ pricePercent|number_format(2) }}%)
                {% else %}
                  N/A
                {% endif %}
              </p>
            </div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">Capitalisation</h5>
              <p class="card-text">
                {% if (chartData.market_cap|length) > 0 %}
                  ${{ chartData.market_cap[(chartData.market_cap|length) - 1].y|number_format(2) }}
                {% else %}
                  N/A
                {% endif %}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Vue TradingView -->
    <div id="tradingView" class="chart-views">
      <div class="chart-header tradingview-header">
        <div>
          <h3>{{ prod.name }}</h3>
          {% if (chartData.price|length) > 0 %}
            {% set latestPrice = chartData.price[(chartData.price|length) - 1].y %}
            {% set previousPrice = chartData.price[(chartData.price|length) - 2].y ?? latestPrice %}
            {% set priceDiff = latestPrice - previousPrice %}
            {% set pricePercent = priceDiff / previousPrice * 100 %}
            <div class="chart-price">${{ latestPrice|number_format(2) }}</div>
            <div class="chart-change {% if priceDiff >= 0 %}

              {% endif %}">{{ priceDiff|number_format(2) }} ({{ pricePercent|number_format(2) }}%)</div>
          {% endif %}
        </div>
      </div>

      <!-- Boutons de plage de temps TradingView -->
      <div class="time-range-buttons tradingview-time-ranges">
        <button class="range-btn active" data-range="1d">1J</button>
        <button class="range-btn" data-range="5d">5J</button>
        <button class="range-btn" data-range="1m">1M</button>
        <button class="range-btn" data-range="ytd">YTD</button>
        <button class="range-btn" data-range="1y">1A</button>
        <button class="range-btn" data-range="5y">5A</button>
        <button class="range-btn" data-range="max">MAX</button>
      </div>

      <!-- Conteneur du graphique TradingView -->
      <div class="chart-container tradingview-style">
        <div class="loading-overlay" id="tradingViewLoading">
          <div class="spinner-border text-light" role="status">
            <span class="visually-hidden">Chargement...</span>
          </div>
        </div>
        <canvas id="tradingViewChart"></canvas>
      </div>

      <!-- Statistiques TradingView -->
      <div class="row mt-3 g-3 tradingview-stats">
        <div class="col-md-2">
          <div class="card tradingview-card">
            <div class="card-body">
              <h5 class="card-title">1 jour</h5>
              <p class="card-text">
                {% if (chartData.price|length) > 1 %}
                  {{ pricePercent|number_format(2) }}%
                {% else %}
                  N/A
                {% endif %}
              </p>
            </div>
          </div>
        </div>
        <div class="col-md-2">
          <div class="card tradingview-card">
            <div class="card-body">
              <h5 class="card-title">1 semaine</h5>
              <p class="card-text">N/A</p>
            </div>
          </div>
        </div>
        <div class="col-md-2">
          <div class="card tradingview-card">
            <div class="card-body">
              <h5 class="card-title">1 mois</h5>
              <p class="card-text">N/A</p>
            </div>
          </div>
        </div>
        <div class="col-md-2">
          <div class="card tradingview-card">
            <div class="card-body">
              <h5 class="card-title">6 mois</h5>
              <p class="card-text">N/A</p>
            </div>
          </div>
        </div>
        <div class="col-md-2">
          <div class="card tradingview-card">
            <div class="card-body">
              <h5 class="card-title">YTD</h5>
              <p class="card-text">N/A</p>
            </div>
          </div>
        </div>
        <div class="col-md-2">
          <div class="card tradingview-card">
            <div class="card-body">
              <h5 class="card-title">1 an</h5>
              <p class="card-text">N/A</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
{% endblock %}

{% block customScript %}
  <script>
			document.addEventListener('DOMContentLoaded', function() {
				const ctx = document.getElementById('tradingChart');
				const tradingViewCtx = document.getElementById('tradingViewChart');
				const loadingOverlay = document.getElementById('chartLoading');
				const tradingViewLoading = document.getElementById('tradingViewLoading');
				const errorElement = document.getElementById('chartError');
				
				if (!ctx || !tradingViewCtx) {
					console.error("Éléments canvas introuvables");
					return;
				}
			
				let chartInstance = null;
				let tradingViewChartInstance = null;
				const productSlug = '{{ prod.slug }}';
				let updateInterval;
			
				// Gestion du changement de vue
				const viewButtons = document.querySelectorAll('.view-btn');
				const classicView = document.getElementById('classicView');
				const tradingView = document.getElementById('tradingView');
				
				viewButtons.forEach(button => {
					button.addEventListener('click', () => {
						viewButtons.forEach(btn => btn.classList.remove('active'));
						button.classList.add('active');
						
						classicView.classList.toggle('active', button.dataset.view === 'classic');
						tradingView.classList.toggle('active', button.dataset.view === 'tradingview');
						
						// Appliquer le style TradingView au body
						document.body.classList.toggle('tradingview-style', button.dataset.view === 'tradingview');
						
						// Initialiser le graphique TradingView si nécessaire
						if (button.dataset.view === 'tradingview' && !tradingViewChartInstance) {
							initTradingViewChart();
						}
					});
				});
			
				/**
				 * Met à jour le graphique en fonction de la plage sélectionnée.
				 * @param {String} range - "1d", "5d", "1m", "ytd", "1y", "5y", "max"
				 */
				async function updateChart(range) {
					try {
						console.log(`Mise à jour du graphique avec la plage: ${range}`);
						loadingOverlay.style.display = 'flex';
						errorElement.style.display = 'none';
						
						const response = await fetch(`/products/${productSlug}/dashboard/data?range=${range}`);
						console.log("Statut de la réponse:", response.status);
						
						if (!response.ok) {
							throw new Error(`Erreur HTTP: ${response.status}`);
						}
						
						const newData = await response.json();
						console.log("Données reçues pour la plage", range, ":", newData);
						
						if (!newData.price || newData.price.length === 0) {
							throw new Error("Aucune donnée disponible");
						}
						
						if (chartInstance) {
							console.log("Mise à jour du graphique classique");
							const processedData = processData(newData.price);
							chartInstance.data.datasets[0].data = processedData;
							chartInstance.update('none');
						}
						
						if (tradingViewChartInstance) {
							console.log("Mise à jour du graphique TradingView");
							const processedData = processData(newData.price);
							tradingViewChartInstance.data.datasets[0].data = processedData;
							tradingViewChartInstance.update('none');
							updateTradingViewStats(newData, range);
						}
						
						// Mise à jour de l'affichage du prix
						updatePriceDisplay(newData);
						
					} catch (error) {
						console.error('Erreur lors de la mise à jour du graphique:', error);
						errorElement.style.display = 'block';
						errorElement.querySelector('span').textContent = 
							`Erreur lors du chargement des données: ${error.message}`;
					} finally {
						loadingOverlay.style.display = 'none';
						tradingViewLoading.style.display = 'none';
					}
				}
			
				function initChart(chartData) {
					console.log("Initialisation du graphique classique");
					
					if (chartInstance) {
						chartInstance.destroy();
					}
					
					const processedData = processData(chartData.price);
					
					try {
						chartInstance = new Chart(ctx, {
							type: 'line',
							data: {
								datasets: [{
									label: 'Prix',
									data: processedData,
									borderColor: '#1a73e8',
									borderWidth: 2,
									backgroundColor: 'rgba(26, 115, 232, 0.1)',
									fill: true,
									tension: 0.4,
									pointRadius: 0
								}]
							},
							options: getChartOptions()
						});
					} catch (e) {
						console.error("Erreur lors de la création du graphique classique:", e);
					}
			
					// Actualiser les données toutes les minutes
					if (updateInterval) {
						clearInterval(updateInterval);
					}
					
					updateInterval = setInterval(() => {
						const activeButton = document.querySelector('.time-range-buttons .range-btn.active') || 
											document.querySelector('.tradingview-time-ranges .range-btn.active');
						const currentRange = activeButton ? activeButton.dataset.range : '1d';
						updateChart(currentRange);
					}, 60000);
				}
				
				function initTradingViewChart() {
					console.log("Initialisation du graphique TradingView");
					
					if (tradingViewChartInstance) {
						tradingViewChartInstance.destroy();
					}
					
					const initialData = window.initialChartData || {{ chartData|json_encode|raw }};
					const processedData = processData(initialData.price);
					
					try {
						tradingViewChartInstance = new Chart(tradingViewCtx, {
							type: 'line',
							data: {
								datasets: [{
									label: 'Prix',
									data: processedData,
									borderColor: '#2962FF',
									borderWidth: 2,
									backgroundColor: 'rgba(41, 98, 255, 0.1)',
									fill: true,
									tension: 0.1,
									pointRadius: 0
								}]
							},
							options: getTradingViewChartOptions()
						});
						
						// Mettre à jour les stats initiales
						updateTradingViewStats(initialData, '1d');
					} catch (e) {
						console.error("Erreur lors de la création du graphique TradingView:", e);
					}
				}
				
				function getChartOptions() {
					return {
						responsive: true,
						maintainAspectRatio: false,
						interaction: {
							mode: 'nearest',
							axis: 'x',
							intersect: false
						},
						plugins: {
							legend: { display: false },
							tooltip: {
								mode: 'nearest',
								intersect: false,
								backgroundColor: '#1e1e1e',
								titleColor: '#e0e0e0',
								bodyColor: '#b0b0b0',
								borderColor: '#333',
								borderWidth: 1,
								padding: 10,
								displayColors: false,
								callbacks: {
									label: (context) => `Prix: $${context.parsed.y.toFixed(2)}`,
									title: (items) => new Date(items[0].parsed.x).toLocaleString()
								}
							}
						},
						scales: {
							x: {
								type: 'time',
								time: {
									tooltipFormat: 'PPpp',
									displayFormats: {
										day: 'MMM d'
									}
								},
								grid: { display: false, drawBorder: false },
								ticks: { color: '#b0b0b0' }
							},
							y: {
								position: 'right',
								grid: { color: '#333', drawBorder: false },
								ticks: {
									color: '#b0b0b0',
									callback: (value) => `$${value}`
								}
							}
						}
					};
				}
				
				function getTradingViewChartOptions() {
					return {
						responsive: true,
						maintainAspectRatio: false,
						interaction: {
							mode: 'nearest',
							axis: 'x',
							intersect: false
						},
						plugins: {
							legend: { display: false },
							tooltip: {
								mode: 'nearest',
								intersect: false,
								backgroundColor: '#131722',
								titleColor: '#b2b5be',
								bodyColor: '#fff',
								borderColor: '#2962FF',
								borderWidth: 1,
								padding: 10,
								displayColors: false,
								callbacks: {
									label: (context) => `$${context.parsed.y.toFixed(2)}`,
									title: (items) => new Date(items[0].parsed.x).toLocaleString()
								}
							}
						},
						scales: {
							x: {
								type: 'time',
								time: {
									tooltipFormat: 'PPpp',
									displayFormats: {
										day: 'MMM d'
									}
								},
								grid: { 
									display: false, 
									drawBorder: false,
									color: '#2a2e39'
								},
								ticks: { 
									color: '#b2b5be',
									maxRotation: 0
								}
							},
							y: {
								position: 'right',
								grid: { 
									color: '#2a2e39', 
									drawBorder: false 
								},
								ticks: {
									color: '#b2b5be',
									callback: (value) => `$${value}`
								}
							}
						}
					};
				}
				
				function updatePriceDisplay(data) {
					console.log("Mise à jour de l'affichage du prix:", data);
					
					if (!data.price || data.price.length === 0) {
						console.warn("Aucune donnée pour mettre à jour l'affichage du prix");
						return;
					}
					
					const latestPrice = data.price[data.price.length - 1].y;
					const previousPrice = data.price[data.price.length - 2]?.y || latestPrice;
					const priceDiff = latestPrice - previousPrice;
					const pricePercent = (priceDiff / previousPrice) * 100;
					
					// Mise à jour vue classique
					const priceElement = document.querySelector('.chart-price');
					const changeElement = document.querySelector('.chart-change');
					
					if (priceElement) {
						priceElement.textContent = `$${latestPrice.toFixed(2)}`;
					}
					
					if (changeElement) {
						changeElement.textContent = `${pricePercent.toFixed(2)}% (${priceDiff.toFixed(2)})`;
						changeElement.className = `chart-change ${priceDiff >= 0 ? 'positive' : 'negative'}`;
					}
					
					// Mise à jour vue TradingView
					const tradingPriceElement = document.querySelector('.tradingview-header .chart-price');
					const tradingChangeElement = document.querySelector('.tradingview-header .chart-change');
					
					if (tradingPriceElement) {
						tradingPriceElement.textContent = `$${latestPrice.toFixed(2)}`;
					}
					
					if (tradingChangeElement) {
						tradingChangeElement.textContent = `${priceDiff.toFixed(2)} (${pricePercent.toFixed(2)}%)`;
						tradingChangeElement.className = `chart-change ${priceDiff >= 0 ? 'positive' : 'negative'}`;
					}
				}
				
				async function updateTradingViewStats(data, range) {
					// Cette fonction devrait être améliorée pour calculer les variations selon la plage
					// Pour l'exemple, nous affichons simplement les mêmes valeurs partout
					const statsElements = document.querySelectorAll('.tradingview-stats .card-text');
					
					if (data.price && data.price.length > 1) {
						const latestPrice = data.price[data.price.length - 1].y;
						const previousPrice = data.price[0].y;
						const priceDiff = latestPrice - previousPrice;
						const pricePercent = (priceDiff / previousPrice) * 100;
						
						statsElements.forEach(el => {
							el.textContent = `${pricePercent.toFixed(2)}%`;
						});
					} else {
						statsElements.forEach(el => {
							el.textContent = "N/A";
						});
					}
				}
			
				function processData(rawData) {
					console.log("Traitement des données brutes:", rawData);
					
					if (!Array.isArray(rawData)) {
						console.error("Les données brutes ne sont pas un tableau:", rawData);
						return [];
					}
					
					const processed = rawData.map(item => {
						try {
							if (!item || typeof item !== 'object') {
								return null;
							}
							
							if (!item.x || !item.y) {
								return null;
							}
							
							const dateObj = new Date(item.x);
							const numValue = parseFloat(item.y);
							
							if (isNaN(dateObj.getTime()) || isNaN(numValue)) {
								return null;
							}
							
							return { 
								x: dateObj, 
								y: numValue 
							};
						} catch (e) {
							console.warn("Erreur lors du traitement de la donnée:", item, e);
							return null;
						}
					}).filter(item => item !== null);
					
					return processed;
				}
				
				// Gestion des boutons de plage de temps classique
				const rangeButtons = document.querySelectorAll('.time-range-buttons .range-btn');
				rangeButtons.forEach(button => {
					button.addEventListener('click', () => {
						rangeButtons.forEach(btn => btn.classList.remove('active'));
						button.classList.add('active');
						updateChart(button.dataset.range);
					});
				});
				
				// Gestion des boutons de plage de temps TradingView
				const tradingViewRangeButtons = document.querySelectorAll('.tradingview-time-ranges .range-btn');
				tradingViewRangeButtons.forEach(button => {
					button.addEventListener('click', () => {
						tradingViewRangeButtons.forEach(btn => btn.classList.remove('active'));
						button.classList.add('active');
						updateChart(button.dataset.range);
					});
				});
				
				// Initialisation avec les données Twig
				try {
					const initialData = {{ chartData|json_encode|raw }};
					
					if (initialData && initialData.price && initialData.price.length > 0) {
						initChart(initialData);
					} else {
						throw new Error("Aucune donnée initiale disponible");
					}
				} catch (e) {
					console.error("Erreur lors de l'initialisation du graphique:", e);
					errorElement.style.display = 'block';
					errorElement.querySelector('span').textContent = 
						`Erreur lors de l'initialisation du graphique: ${e.message}`;
				}
				
				// Nettoyage lorsque la page est quittée
				window.addEventListener('beforeunload', () => {
					if (chartInstance) {
						chartInstance.destroy();
					}
					if (tradingViewChartInstance) {
						tradingViewChartInstance.destroy();
					}
					clearInterval(updateInterval);
				});
			});
		</script>
{% endblock %}
