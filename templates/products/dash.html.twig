{% extends 'base.html.twig' %}

{% block title %}Dashboard | {{ prod.name }}{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
  :root {
    --primary-color: #4361ee;
    --primary-light: #6883f4;
    --secondary-color: #3f37c9;
    --success-color: #4cc9f0;
    --danger-color: #f72585;
    --dark-color: #1a1a1a;
    --darker-color: #121212;
    --light-color: #f8f9fa;
    --border-radius: 14px;
    --box-shadow: 0 10px 40px rgba(0, 0, 0, 0.25);
    --transition: all 0.4s cubic-bezier(0.16, 0.85, 0.36, 1);
    --glass-effect: rgba(30, 30, 30, 0.4);
  }
  
  body {
    background: linear-gradient(135deg, var(--darker-color), var(--dark-color));
    color: #f0f0f0;
  }
  
  .chart-container {
    position: relative;
    height: 550px;
    width: 100%;
    background: linear-gradient(145deg, var(--dark-color), var(--darker-color));
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    padding: 25px;
    border: 1px solid rgba(255, 255, 255, 0.08);
    backdrop-filter: blur(8px);
  }
  
  #tradingChart {
    width: 100% !important;
    height: 100% !important;
    border-radius: calc(var(--border-radius) - 5px);
  }
  
  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(20, 20, 20, 0.85);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
    border-radius: var(--border-radius);
    backdrop-filter: blur(4px);
  }
  
  .chart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    background: var(--glass-effect);
    padding: 20px 25px;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(6px);
  }
  
  .chart-price {
    font-size: 2.4rem;
    font-weight: 700;
    background: linear-gradient(to right, var(--primary-color), var(--success-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    letter-spacing: 0.5px;
  }
  
  .chart-change {
    font-size: 1.2rem;
    padding: 8px 18px;
    border-radius: 20px;
    font-weight: 600;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }
  
  .positive {
    color: #4caf50;
    background-color: rgba(76, 175, 80, 0.15);
    border: 1px solid rgba(76, 175, 80, 0.3);
  }
  
  .negative {
    color: #ef5350;
    background-color: rgba(239, 83, 80, 0.15);
    border: 1px solid rgba(239, 83, 80, 0.3);
  }
  
  .time-range-buttons {
    display: flex;
    gap: 12px;
    margin-bottom: 25px;
    flex-wrap: wrap;
  }
  
  .time-range-buttons button {
    background-color: rgba(67, 97, 238, 0.12);
    color: #e0e0e0;
    border: 1px solid rgba(67, 97, 238, 0.25);
    padding: 10px 20px;
    border-radius: 20px;
    cursor: pointer;
    transition: var(--transition);
    font-weight: 500;
    font-size: 0.95rem;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }
  
  .time-range-buttons button:hover {
    background-color: rgba(67, 97, 238, 0.25);
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(67, 97, 238, 0.2);
  }
  
  .time-range-buttons button.active {
    background-color: var(--primary-color);
    color: #fff;
    border-color: var(--primary-light);
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(67, 97, 238, 0.3);
  }
  
  .stats-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
    gap: 25px;
    margin-top: 30px;
  }
  
  .stat-card {
    background: var(--glass-effect);
    border-radius: var(--border-radius);
    padding: 28px;
    box-shadow: var(--box-shadow);
    border: 1px solid rgba(255, 255, 255, 0.08);
    transition: var(--transition);
    backdrop-filter: blur(6px);
  }
  
  .stat-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 15px 45px rgba(0, 0, 0, 0.3);
    border-color: rgba(67, 97, 238, 0.3);
  }
  
  .stat-title {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    gap: 12px;
  }
  
  .stat-icon {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background: rgba(67, 97, 238, 0.2);
    color: var(--primary-light);
    font-size: 1rem;
    box-shadow: 0 4px 10px rgba(67, 97, 238, 0.1);
  }
  
  .stat-value {
    font-size: 1.8rem;
    font-weight: 700;
    margin-bottom: 10px;
    letter-spacing: 0.5px;
  }
  
  .text-primary {
    color: var(--primary-light) !important;
  }
  
  .text-info {
    color: var(--success-color) !important;
  }
  
  @media (max-width: 992px) {
    .chart-container {
      height: 450px;
      padding: 20px;
    }
    
    .chart-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 15px;
    }
    
    .stat-card {
      padding: 22px;
    }
    
    .stat-value {
      font-size: 1.6rem;
    }
  }
  
  @media (max-width: 768px) {
    .chart-container {
      height: 400px;
    }
    
    .stats-container {
      grid-template-columns: 1fr 1fr;
    }
  }
  
  @media (max-width: 576px) {
    .stats-container {
      grid-template-columns: 1fr;
    }
    
    .time-range-buttons {
      justify-content: center;
    }
  }
</style>
{% endblock %}

{% block body %}
<div class="container-fluid py-4 mt-2">
  <div id="chartError" class="alert alert-danger" style="display: none;">
    <i class="fas fa-exclamation-triangle me-2"></i>
    <span>Impossible de charger les données du graphique</span>
  </div>

  <div id="classicView" class="chart-views active">
    <div class="chart-header">
      <div>
        <h3 class="mb-2">{{ prod.name }}</h3>
        {% if (chartData.price|length) > 0 %}
          {% set latestPrice = chartData.price[(chartData.price|length) - 1].y %}
          {% set previousPrice = chartData.price[(chartData.price|length) - 2].y ?? latestPrice %}
          {% set priceDiff = latestPrice - previousPrice %}
          {% set pricePercent = priceDiff / previousPrice * 100 %}
          <div class="chart-price">${{ latestPrice|number_format(2) }}</div>
        {% endif %}
      </div>
      {% if (chartData.price|length) > 1 %}
        <div class="chart-change {% if priceDiff >= 0 %}positive{% else %}negative{% endif %}">
          {{ priceDiff|number_format(2) }} ({{ pricePercent|number_format(2) }}%)
        </div>
      {% endif %}
    </div>
    
    <div class="time-range-buttons">
      <button class="range-btn active" data-range="1d">1J</button>
      <button class="range-btn" data-range="5d">5J</button>
      <button class="range-btn" data-range="1m">1M</button>
      <button class="range-btn" data-range="ytd">YTD</button>
      <button class="range-btn" data-range="1y">1A</button>
      <button class="range-btn" data-range="5y">5A</button>
      <button class="range-btn" data-range="max">MAX</button>
    </div>
    
    <div class="chart-container">
      <div class="loading-overlay" id="chartLoading">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Chargement...</span>
        </div>
      </div>
      <canvas id="tradingChart"></canvas>
    </div>
    
    <div class="stats-container">
      <div class="stat-card">
        <div class="stat-title">
          <div class="stat-icon">
            <i class="fas fa-dollar-sign"></i>
          </div>
          Valeur actuelle
        </div>
        <div class="stat-value text-primary">${{ latestPrice|number_format(2) }}</div>
        <div class="stat-change {% if priceDiff >= 0 %}positive{% else %}negative{% endif %}">
          {{ priceDiff|number_format(2) }} ({{ pricePercent|number_format(2) }}%)
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-title">
          <div class="stat-icon">
            <i class="fas fa-flag"></i>
          </div>
          Prix de départ
        </div>
        <div class="stat-value text-info">
          {% if (chartData.price|length) > 0 %}
            ${{ chartData.price[0].y|number_format(2) }}
          {% else %}
            N/A
          {% endif %}
        </div>
        <div class="stat-change">
          {% if (chartData.price|length) > 1 %}
            {% set totalChange = latestPrice - chartData.price[0].y %}
            {% set totalPercent = (totalChange / chartData.price[0].y) * 100 %}
            <span class="{% if totalChange >= 0 %}positive{% else %}negative{% endif %}">
              {{ totalChange|number_format(2) }} ({{ totalPercent|number_format(2) }}%)
            </span>
          {% endif %}
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-title">
          <div class="stat-icon">
            <i class="fas fa-chart-line"></i>
          </div>
          Fluctuation (24h)
        </div>
        <div class="stat-value">
          {% if (chartData.price|length) > 1 %}
            {% set last24h = chartData.price|slice(-24) %}
            {% set high24h = last24h|reduce((max, item) => max.y > item.y ? max : item) %}
            {% set low24h = last24h|reduce((min, item) => min.y < item.y ? min : item) %}
            ${{ (high24h.y - low24h.y)|number_format(2) }}
          {% else %}
            N/A
          {% endif %}
        </div>
        <div class="stat-change">
          {% if (chartData.price|length) > 1 %}
            <span class="text-muted">
              Haut: ${{ high24h.y|number_format(2) }} | Bas: ${{ low24h.y|number_format(2) }}
            </span>
          {% endif %}
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-title">
          <div class="stat-icon">
            <i class="fas fa-chart-pie"></i>
          </div>
          Capitalisation
        </div>
        <div class="stat-value">
          {% if prod.marketCap is defined and prod.marketCap %}
            ${{ prod.marketCap|number_format(0, '.', ',') }}
          {% else %}
            N/A
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  const ctx = document.getElementById('tradingChart');
  const errorElement = document.getElementById('chartError');
  const productSlug = '{{ prod.slug }}';
  let chartInstance = null;
  let refreshInterval = null;
  let currentRange = '1d';

  function formatTime(date) {
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${hours}:${minutes}:${seconds}`;
  }

  function createGradient(ctx) {
    const gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);
    gradient.addColorStop(0, 'rgba(67, 97, 238, 0.5)');
    gradient.addColorStop(0.7, 'rgba(67, 97, 238, 0.1)');
    gradient.addColorStop(1, 'rgba(67, 97, 238, 0)');
    return gradient;
  }

  function initChart(data) {
    if (chartInstance) chartInstance.destroy();
    
    const gradient = createGradient(ctx.getContext('2d'));
    
    chartInstance = new Chart(ctx, {
      type: 'line',
      data: {
        datasets: [{
          label: 'Price',
          data: data.price.map(item => ({
            x: new Date(item.x),
            y: item.y
          })),
          borderColor: '#4361ee',
          borderWidth: 3,
          backgroundColor: gradient,
          fill: true,
          tension: 0.4,
          pointRadius: 0,
          pointHoverRadius: 6,
          pointHoverBorderWidth: 2,
          pointHoverBackgroundColor: '#4361ee',
          pointHoverBorderColor: '#fff'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: {
          duration: 1000,
          easing: 'easeOutQuart'
        },
        plugins: {
          legend: { display: false },
          tooltip: {
            mode: 'nearest',
            intersect: false,
            backgroundColor: 'rgba(30, 30, 30, 0.95)',
            titleColor: '#fff',
            bodyColor: 'rgba(255, 255, 255, 0.8)',
            borderColor: '#4361ee',
            borderWidth: 1,
            padding: 12,
            cornerRadius: 8,
            callbacks: {
              label: (context) => `$${context.parsed.y.toFixed(2)}`,
              title: (items) => {
                const date = new Date(items[0].parsed.x);
                return formatTime(date);
              }
            }
          }
        },
        scales: {
          x: {
            type: 'time',
            time: {
              displayFormats: {
                hour: 'HH:mm',
                minute: 'HH:mm',
                second: 'HH:mm:ss'
              },
              tooltipFormat: 'HH:mm:ss'
            },
            grid: { 
              display: false,
              color: 'rgba(255, 255, 255, 0.08)'
            },
            ticks: {
              color: 'rgba(255, 255, 255, 0.6)',
              callback: function(value) {
                const date = new Date(value);
                return formatTime(date);
              },
              maxRotation: 0,
              autoSkip: true,
              autoSkipPadding: 20
            },
            border: {
              color: 'rgba(255, 255, 255, 0.1)'
            }
          },
          y: {
            position: 'right',
            grid: { 
              color: 'rgba(255, 255, 255, 0.08)',
              drawBorder: false
            },
            ticks: {
              color: 'rgba(255, 255, 255, 0.6)',
              callback: (value) => `$${value}`,
              padding: 10
            }
          }
        },
        interaction: {
          intersect: false,
          mode: 'index'
        },
        elements: {
          line: {
            borderWidth: 3
          }
        }
      }
    });
  }

  async function updateChart(range) {
    try {
      document.getElementById('chartLoading').style.display = 'flex';
      errorElement.style.display = 'none';
      currentRange = range;
      
      const response = await fetch(`/products/${productSlug}/dashboard/data?range=${range}`);
      const newData = await response.json();
      
      if (chartInstance) {
        chartInstance.data.datasets[0].data = newData.price.map(item => ({
          x: new Date(item.x),
          y: item.y
        }));
        chartInstance.update();
      }
      
      // Mise à jour des données affichées
      if (newData.price && newData.price.length > 0) {
        const latestPrice = newData.price[newData.price.length - 1].y;
        const previousPrice = newData.price[newData.price.length - 2]?.y ?? latestPrice;
        const priceDiff = latestPrice - previousPrice;
        const pricePercent = (priceDiff / previousPrice) * 100;

        document.querySelectorAll('.chart-price').forEach(el => {
          el.textContent = `$${latestPrice.toFixed(2)}`;
        });
        
        document.querySelectorAll('.chart-change').forEach(el => {
          el.textContent = `${priceDiff.toFixed(2)} (${pricePercent.toFixed(2)}%)`;
          el.className = `chart-change ${priceDiff >= 0 ? 'positive' : 'negative'}`;
        });
      }
    } catch (error) {
      errorElement.style.display = 'block';
      errorElement.querySelector('span').textContent = `Erreur: ${error.message}`;
    } finally {
      document.getElementById('chartLoading').style.display = 'none';
    }
  }

  function setupAutoRefresh() {
    // Nettoyer l'intervalle existant
    if (refreshInterval) {
      clearInterval(refreshInterval);
    }
    
    // Actualiser toutes les minutes (60000 ms)
    refreshInterval = setInterval(() => {
      updateChart(currentRange);
    }, 60000);
  }

  document.querySelectorAll('.range-btn').forEach(button => {
    button.addEventListener('click', function() {
      document.querySelectorAll('.range-btn').forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      updateChart(this.dataset.range);
    });
  });

  // Initialisation
  const initialData = {{ chartData|json_encode|raw }};
  if (initialData?.price?.length > 0) {
    initChart(initialData);
    setupAutoRefresh();
  } else {
    errorElement.style.display = 'block';
    errorElement.querySelector('span').textContent = "Aucune donnée disponible";
  }
});
</script>
{% endblock %}