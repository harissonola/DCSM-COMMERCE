{% extends 'base.html.twig' %}

{% block title %}
	Dashboard |
	{{ prod.name }}
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<style>
		/* Corps en mode sombre */
		body {
			background-color: #121212;
			color: #e0e0e0;
			font-family: 'Helvetica Neue', Arial, sans-serif;
			transition: background-color 0.3s ease, color 0.3s ease;
		}

		.container-fluid {
			padding: 20px;
		}

		/* Graphique */
		.chart-container {
			position: relative;
			height: 60vh;
			min-height: 400px; /* Hauteur minimale pour éviter un graphique trop petit */
			margin-bottom: 20px;
		}

		#tradingChart {
			background: #1e1e1e;
			border-radius: 8px;
			padding: 15px;
			border: 1px solid #333;
		}

		/* Tooltip */
		.chartjs-tooltip {
			background: #1e1e1e !important;
			border: 1px solid #333;
			border-radius: 4px;
			pointer-events: none;
			box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
			color: #e0e0e0;
			padding: 8px;
		}

		/* Chargement */
		.loading-overlay {
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: rgba(30, 30, 30, 0.7);
			display: none;
			align-items: center;
			justify-content: center;
			z-index: 10;
		}

		/* En-tête du graphique */
		.chart-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 15px;
		}

		.chart-price {
			font-size: 2rem;
			font-weight: 500;
		}

		.chart-change {
			font-size: 1rem;
			padding: 4px 8px;
			border-radius: 4px;
		}

		.positive {
			color: #4caf50;
			background-color: rgba(76, 175, 80, 0.2);
		}

		.negative {
			color: #ef5350;
			background-color: rgba(239, 83, 80, 0.2);
		}

		/* Boutons de plage de temps */
		.time-range-buttons {
			display: flex;
			gap: 8px;
			margin-bottom: 15px;
			flex-wrap: wrap;
		}

		.time-range-buttons button {
			background-color: #2e2e2e;
			color: #e0e0e0;
			border: 1px solid #444;
			padding: 6px 12px;
			border-radius: 4px;
			cursor: pointer;
			transition: all 0.3s ease;
		}

		.time-range-buttons button:hover {
			background-color: #3a3a3a;
		}

		.time-range-buttons button.active {
			background-color: #1a73e8;
			color: #fff;
			border-color: #1a73e8;
		}

		/* Cartes */
		.card {
			background-color: #1e1e1e;
			border: none;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
			transition: all 0.3s ease;
			height: 100%;
		}

		.card:hover {
			transform: translateY(-3px);
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.7);
		}

		.card-body {
			padding: 15px;
		}

		.card-title {
			color: #e0e0e0;
			font-size: 1rem;
			margin-bottom: 0.5rem;
		}

		.card-text {
			color: #b0b0b0;
			font-size: 1.25rem;
			font-weight: 500;
		}

		/* Message d'erreur */
		.chart-error {
			display: none;
			color: #ef5350;
			text-align: center;
			padding: 20px;
			background: rgba(239, 83, 80, 0.1);
			border-radius: 8px;
			margin-bottom: 20px;
		}
	</style>
{% endblock %}

{% block body %}
	<div
		class="container-fluid py-3 mt-3">
		<!-- Message d'erreur caché par défaut -->
		<div id="chartError" class="chart-error">
			<i class="fas fa-exclamation-triangle me-2"></i>
			<span>Impossible de charger les données du graphique. Veuillez rafraîchir la page.</span>
		</div>

		<div class="chart-header">
			<div>
				<h3>{{ prod.name }}</h3>
				{% if chartData.price|length > 0 %}
					{% set latestPrice = chartData.price[chartData.price|length - 1].y %}
					{% set previousPrice = chartData.price[chartData.price|length - 2].y ?? latestPrice %}
					{% set priceDiff = latestPrice - previousPrice %}
					{% set pricePercent = (priceDiff / previousPrice) * 100 %}
					<div class="chart-price">${{ latestPrice|number_format(2) }}</div>
				{% endif %}
			</div>
			{% if chartData.price|length > 1 %}
				<div class="chart-change {% if priceDiff >= 0 %}positive{% else %}negative{% endif %}">
					{{ pricePercent|number_format(2) }}% ({{ priceDiff|number_format(2) }})
				</div>
			{% endif %}
		</div>

		<!-- Boutons de plage de temps -->
		<div class="time-range-buttons">
			<button class="range-btn active" data-range="1d">1J</button>
			<button class="range-btn" data-range="5d">5J</button>
			<button class="range-btn" data-range="1m">1M</button>
			<button class="range-btn" data-range="ytd">YTD</button>
			<button class="range-btn" data-range="1y">1A</button>
			<button class="range-btn" data-range="5y">5A</button>
			<button class="range-btn" data-range="max">MAX</button>
		</div>

		<!-- Conteneur du graphique -->
		<div class="chart-container">
			<div class="loading-overlay" id="chartLoading">
				<div class="spinner-border text-light" role="status">
					<span class="visually-hidden">Chargement...</span>
				</div>
			</div>
			<canvas id="tradingChart"></canvas>
		</div>

		<!-- Cartes d'information -->
		<div class="row mt-3 g-3">
			<div class="col-md-3">
				<div class="card">
					<div class="card-body">
						<h5 class="card-title">Dernier cours</h5>
						<p class="card-text">
							{% if chartData.price|length > 0 %}
								${{ chartData.price[chartData.price|length - 1].y|number_format(2) }}
							{% else %}
								N/A
							{% endif %}
						</p>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				<div class="card">
					<div class="card-body">
						<h5 class="card-title">Ouverture</h5>
						<p class="card-text">
							{% if chartData.price|length > 0 %}
								${{ chartData.price[0].y|number_format(2) }}
							{% else %}
								N/A
							{% endif %}
						</p>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				<div class="card">
					<div class="card-body">
						<h5 class="card-title">Variation</h5>
						<p class="card-text">
							{% if chartData.price|length > 1 %}
								{{ priceDiff|number_format(2) }}
								({{ pricePercent|number_format(2) }}%)
							{% else %}
								N/A
							{% endif %}
						</p>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				<div class="card">
					<div class="card-body">
						<h5 class="card-title">Capitalisation</h5>
						<p class="card-text">
							{% if chartData.market_cap|length > 0 %}
								${{ chartData.market_cap[chartData.market_cap|length - 1].y|number_format(2) }}
							{% else %}
								N/A
							{% endif %}
						</p>
					</div>
				</div>
			</div>
		</div>
	</div>
{% endblock %}

{% block customScript %} <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	 <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
	 <script src="https://cdn.jsdelivr.net/npm/date-fns"></script>

	 <script>
				document.addEventListener('DOMContentLoaded', function() {
					const ctx = document.getElementById('tradingChart');
					const loadingOverlay = document.getElementById('chartLoading');
					const errorElement = document.getElementById('chartError');
					
					if (!ctx) {
						console.error("Élément canvas introuvable");
						return;
					}
				
					let chartInstance = null;
					const productSlug = '{{ prod.slug }}';
					let updateInterval;
				
					// Récupération des boutons de plage de temps
					const rangeButtons = document.querySelectorAll('.range-btn');
				
					/**
					 * Met à jour le graphique en fonction de la plage sélectionnée.
					 * @param {String} range - "1d", "5d", "1m", "ytd", "1y", "5y", "max"
					 */
					async function updateChart(range) {
						try {
							loadingOverlay.style.display = 'flex';
							errorElement.style.display = 'none';
							
							const response = await fetch(`/products/${productSlug}/dashboard/data?range=${range}`);
							
							if (!response.ok) {
								throw new Error(`Erreur HTTP: ${response.status}`);
							}
							
							const newData = await response.json();
							
							if (!newData.price || newData.price.length === 0) {
								throw new Error("Aucune donnée disponible");
							}
							
							if (chartInstance) {
								// Mise à jour des données existantes
								chartInstance.data.datasets[0].data = processData(newData.price);
								chartInstance.update('none');
							} else {
								// Création initiale du graphique
								initChart(newData);
							}
							
							// Mise à jour de l'affichage du prix
							updatePriceDisplay(newData);
							
						} catch (error) {
							console.error('Erreur lors de la mise à jour du graphique:', error);
							errorElement.style.display = 'block';
							errorElement.querySelector('span').textContent = 
								`Erreur lors du chargement des données: ${error.message}`;
						} finally {
							loadingOverlay.style.display = 'none';
						}
					}
				
					function initChart(chartData) {
						if (chartInstance) {
							chartInstance.destroy();
						}
						
						const processedData = processData(chartData.price);
						
						chartInstance = new Chart(ctx, {
							type: 'line',
							data: {
								datasets: [{
									label: 'Prix',
									data: processedData,
									borderColor: '#1a73e8',
									borderWidth: 2,
									backgroundColor: 'rgba(26, 115, 232, 0.1)',
									fill: true,
									tension: 0.4,
									pointRadius: 0
								}]
							},
							options: getChartOptions()
						});
				
						// Actualiser les données toutes les minutes
						updateInterval = setInterval(() => {
							const activeButton = document.querySelector('.range-btn.active');
							const currentRange = activeButton ? activeButton.dataset.range : '1d';
							updateChart(currentRange);
						}, 60000);
					}
					
					function getChartOptions() {
						return {
							responsive: true,
							maintainAspectRatio: false,
							interaction: {
								mode: 'nearest',
								axis: 'x',
								intersect: false
							},
							plugins: {
								legend: { display: false },
								tooltip: {
									mode: 'nearest',
									intersect: false,
									backgroundColor: '#1e1e1e',
									titleColor: '#e0e0e0',
									bodyColor: '#b0b0b0',
									borderColor: '#333',
									borderWidth: 1,
									padding: 10,
									displayColors: false,
									callbacks: {
										label: (context) => `Prix: $${context.parsed.y.toFixed(2)}`,
										title: (items) => new Date(items[0].parsed.x).toLocaleString()
									}
								}
							},
							scales: {
								x: {
									type: 'time',
									time: {
										tooltipFormat: 'PPpp',
										displayFormats: {
											day: 'MMM d'
										}
									},
									grid: { display: false, drawBorder: false },
									ticks: { color: '#b0b0b0' }
								},
								y: {
									position: 'right',
									grid: { color: '#333', drawBorder: false },
									ticks: {
										color: '#b0b0b0',
										callback: (value) => `$${value}`
									}
								}
							}
						};
					}
					
					function updatePriceDisplay(data) {
						if (!data.price || data.price.length === 0) return;
						
						const latestPrice = data.price[data.price.length - 1].y;
						const previousPrice = data.price[data.price.length - 2]?.y || latestPrice;
						const priceDiff = latestPrice - previousPrice;
						const pricePercent = (priceDiff / previousPrice) * 100;
						
						const priceElement = document.querySelector('.chart-price');
						const changeElement = document.querySelector('.chart-change');
						
						if (priceElement) {
							priceElement.textContent = `$${latestPrice.toFixed(2)}`;
						}
						
						if (changeElement) {
							changeElement.textContent = `${pricePercent.toFixed(2)}% (${priceDiff.toFixed(2)})`;
							changeElement.className = `chart-change ${priceDiff >= 0 ? 'positive' : 'negative'}`;
						}
					}
				
					function processData(rawData) {
						return rawData.map(item => {
							try {
								return { 
									x: new Date(item.x), 
									y: parseFloat(item.y) 
								};
							} catch (e) {
								console.warn("Donnée invalide ignorée:", item, e);
								return null;
							}
						}).filter(item => item !== null);
					}
				
					// Initialisation avec les données Twig
					try {
						const initialData = {{ chartData|json_encode|raw }};
						
						if (initialData.price && initialData.price.length > 0) {
							initChart(initialData);
						} else {
							throw new Error("Aucune donnée initiale disponible");
						}
					} catch (e) {
						console.error("Erreur lors de l'initialisation du graphique:", e);
						errorElement.style.display = 'block';
						errorElement.querySelector('span').textContent = 
							`Erreur lors de l'initialisation du graphique: ${e.message}`;
					}
				
					// Gestion des boutons de plage de temps
					rangeButtons.forEach(button => {
						button.addEventListener('click', () => {
							rangeButtons.forEach(btn => btn.classList.remove('active'));
							button.classList.add('active');
							updateChart(button.dataset.range);
						});
					});
					
					// Nettoyage lorsque la page est quittée
					window.addEventListener('beforeunload', () => {
						if (chartInstance) {
							chartInstance.destroy();
						}
						clearInterval(updateInterval);
					});
				});
			</script>
{% endblock %}
