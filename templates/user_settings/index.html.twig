{% extends 'base.html.twig' %}

{% block title %}
	{{ app.user.fname }}
	{{ app.user.lname }}
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<!-- Toastr CSS -->
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
{% endblock %}

{% block body %}
	<div
		class="settings-wrapper" data-theme="dark">
		<!-- Sidebar Navigation -->
		<aside class="settings-sidebar">
			<div class="sidebar-header">
				<h3>Paramètres</h3>
			</div>
			<nav class="sidebar-nav">
				<a href="{{ path('app_dashboard') }}" class="nav-item">
					<i class="bi bi-speedometer2"></i>
					<span>Tableau de bord</span>
				</a>
				<a href="{{ path('app_user_settings') }}" class="nav-item active">
					<i class="bi bi-gear"></i>
					<span>Paramètres</span>
				</a>
				<a href="#" class="nav-item">
					<i class="bi bi-headset"></i>
					<span>Support</span>
				</a>
			</nav>
		</aside>

		<!-- Main Content -->
		<main
			class="settings-content">
			<!-- Profile Section -->
			<section class="profile-section" id="profile-section">
				<div class="profile-header">
					<h2>Profil</h2>
					<p>Gérez vos informations personnelles et vos préférences.</p>
				</div>

				<div
					class="profile-grid">
					<!-- Avatar Upload -->
					<div class="avatar-card">
						<turbo-frame id="avatar-frame">
							<form action="{{ path('app_user_settings_update') }}" method="POST" data-turbo-method="post" data-turbo-frame="_top" id="avatarForm" enctype="multipart/form-data">
								<div class="avatar-preview">
									<img src="{{ app.user.photo }}" alt="Avatar" id="profileImage">
									<label class="avatar-edit">
										<i class="bi bi-camera"></i>
										<input type="file" id="avatarUpload" name="avatarUpload" accept="image/*" class="hidden-input">
									</label>
								</div>
								<button type="submit" class="btn-save hidden" id="avatarUpdateBtn">Mettre à jour</button>
							</form>
						</turbo-frame>
					</div>

					<!-- Personal Info Form -->
					<div class="form-card">
						<h4>Informations personnelles</h4>
						<turbo-frame id="personal-info-frame">
							<form action="{{ path('app_user_settings_update') }}" method="POST" data-turbo-method="post" data-turbo-frame="_top">
								<div class="form-group">
									<label for="username">Nom d'utilisateur</label>
									<input type="text" id="username" name="username" value="{{ app.user.username }}" required>
								</div>
								<div class="form-group">
									<label for="email">Email</label>
									<input type="email" id="email" name="email" value="{{ app.user.email }}" required>
								</div>
								<button type="submit" class="btn-save">Sauvegarder</button>
							</form>
						</turbo-frame>
					</div>
				</div>
			</section>

			<!-- Security Section -->
			<section class="security-section" id="security-section">
				<h4>Sécurité du compte</h4>
				<div class="form-card">
					<turbo-frame id="security-frame">
						<form action="{{ path('app_user_settings_update') }}" method="POST" data-turbo-method="post" data-turbo-frame="_top">
							<div class="form-group">
								<label for="currentPassword">Mot de passe actuel</label>
								<input type="password" id="currentPassword" name="currentPassword" required>
							</div>
							<div class="form-group">
								<label for="newPassword">Nouveau mot de passe</label>
								<input type="password" id="newPassword" name="newPassword" required>
							</div>
							<div class="form-group">
								<label for="confirmPassword">Confirmer le mot de passe</label>
								<input type="password" id="confirmPassword" name="confirmPassword" required>
							</div>
							<button type="submit" class="btn-save">Changer le mot de passe</button>
						</form>
					</turbo-frame>
				</div>
			</section>

			<!-- Notifications Section -->
			<section class="notifications-section" id="notifications-section">
				<h4>Préférences de notifications</h4>
				<div class="form-card">
					<turbo-frame id="notifications-frame">
						<form action="{{ path('app_user_settings_update') }}" method="POST" data-turbo-method="post" data-turbo-frame="_top">
							<div class="form-group toggle-group">
								<label>Notifications par email</label>
								<label class="switch">
									<input type="checkbox" name="emailNotifications" {% if app.user.emailNotifications %} checked {% endif %}>
									<span class="slider"></span>
								</label>
							</div>
							<div class="form-group toggle-group">
								<label>Notifications push</label>
								<label class="switch">
									<input type="checkbox" name="pushNotifications">
									<span class="slider"></span>
								</label>
							</div>
							<button type="submit" class="btn-save">Enregistrer</button>
						</form>
					</turbo-frame>
				</div>
			</section>
		</main>
	</div>

	<style>:root
	{
		--primary-color: #6366f1;
		--primary-hover: #818cf8;
		--background-dark: #0f172a;
		--background-light: #1e293b;
		--border-color: #334155;
		--text-color: #f8fafc;
	}

	body {
		background-color: var(--background-dark);
		color: var(--text-color);
		font-family: 'Inter', sans-serif;
	}

	.settings-wrapper {
		display: flex;
		min-height: 100vh;
	}

	.settings-sidebar {
		width: 280px;
		background: var(--background-light);
		padding: 2rem;
		border-right: 1px solid var(--border-color);
	}

	.sidebar-header h3 {
		font-size: 1.5rem;
		font-weight: 600;
		margin-bottom: 2rem;
		color: var(--text-color);
	}

	.sidebar-nav {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.nav-item {
		display: flex;
		align-items: center;
		gap: 1rem;
		padding: 0.75rem 1rem;
		border-radius: 0.5rem;
		color: var(--text-color);
		text-decoration: none;
		transition: all 0.2s ease;
	}

	.nav-item:hover {
		background: rgba(255, 255, 255, 0.05);
	}

	.nav-item.active {
		background: var(--primary-color);
		color: white;
	}

	.settings-content {
		flex: 1;
		padding: 2rem;
	}

	.profile-section,
	.security-section,
	.notifications-section {
		margin-bottom: 2rem;
	}

	.profile-header h2 {
		font-size: 2rem;
		font-weight: 600;
		margin-bottom: 0.5rem;
	}

	.profile-header p {
		color: #94a3b8;
	}

	.profile-grid {
		display: grid;
		grid-template-columns: 240px 1fr;
		gap: 2rem;
		margin-top: 2rem;
	}

	.avatar-card {
		background: var(--background-light);
		padding: 1.5rem;
		border-radius: 1rem;
		border: 1px solid var(--border-color);
		text-align: center;
	}

	.avatar-preview {
		position: relative;
		width: 150px;
		height: 150px;
		margin: 0 auto 1rem;
		border-radius: 50%;
	}

	.avatar-preview img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		border-radius: 50%;
		border: 2px solid var(--primary-color);
	}

	.avatar-edit {
		position: absolute;
		bottom: 0;
		right: 0;
		background: var(--background-dark);
		width: 40px;
		height: 40px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		border: 2px solid var(--primary-color);
		cursor: pointer;
		transition: transform 0.3s ease;
	}

	.avatar-edit:hover {
		transform: scale(1.1);
	}

	.avatar-edit i {
		font-size: 1.2rem;
		color: var(--primary-color);
	}

	.hidden-input {
		display: none;
	}

	.btn-save {
		background: var(--primary-color);
		color: white;
		padding: 0.75rem 1.5rem;
		border: none;
		border-radius: 0.5rem;
		cursor: pointer;
		transition: background 0.2s ease;
		width: 100%;
	}

	.btn-save:hover {
		background: var(--primary-hover);
	}

	.btn-save.hidden {
		display: none;
	}

	.form-card {
		background: var(--background-light);
		padding: 1.5rem;
		border-radius: 1rem;
		border: 1px solid var(--border-color);
	}

	.form-group {
		margin-bottom: 1.5rem;
	}

	.form-group label {
		display: block;
		margin-bottom: 0.5rem;
		font-weight: 500;
		color: #94a3b8;
	}

	.form-group input {
		width: 100%;
		padding: 0.75rem;
		background: var(--background-dark);
		border: 1px solid var(--border-color);
		border-radius: 0.5rem;
		color: var(--text-color);
		font-size: 1rem;
	}

	.toggle-group {
		display: flex;
		align-items: center;
		justify-content: space-between;
	}

	.switch {
		position: relative;
		display: inline-block;
		width: 48px;
		height: 24px;
	}

	.switch input {
		opacity: 0;
		width: 0;
		height: 0;
	}

	.slider {
		position: absolute;
		cursor: pointer;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: #475569;
		border-radius: 24px;
		transition: 0.3s;
	}

	.slider:before {
		position: absolute;
		content: "";
		height: 20px;
		width: 20px;
		left: 2px;
		bottom: 2px;
		background: white;
		border-radius: 50%;
		transition: 0.3s;
	}

	input:checked + .slider {
		background: var(--primary-color);
	}

	input:checked + .slider:before {
		transform: translateX(24px);
	}

	.turbo-progress-bar {
		height: 3px;
		background-color: var(--primary-color);
	}

	.form-success-flash {
		background-color: #10b981;
		color: white;
		padding: 0.75rem;
		border-radius: 0.5rem;
		margin-bottom: 1rem;
		display: flex;
		align-items: center;
		justify-content: space-between;
	}

	.form-error-flash {
		background-color: #ef4444;
		color: white;
		padding: 0.75rem;
		border-radius: 0.5rem;
		margin-bottom: 1rem;
		display: flex;
		align-items: center;
		justify-content: space-between;
	}

	@media(max-width: 768px) {
		.settings-wrapper {
			flex-direction: column;
		}

		.settings-sidebar {
			width: 100%;
			border-right: none;
			padding: 1rem;
		}

		.profile-grid {
			grid-template-columns: 1fr;
		}
	}
</style>

 <script>
        document.addEventListener('turbo:load', () => {
            const avatarInput = document.getElementById('avatarUpload');
            const avatarUpdateBtn = document.getElementById('avatarUpdateBtn');
            const avatarForm = document.getElementById('avatarForm');
            
            avatarInput.addEventListener('change', function(e) {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        document.getElementById('profileImage').src = e.target.result;
                        avatarUpdateBtn.classList.remove('hidden');
                    };
                    reader.readAsDataURL(this.files[0]);
                }
            });

            // Gestion de l'indicateur de chargement Turbo
            document.addEventListener('turbo:submit-start', () => {
                const loadingIndicator = document.createElement('div');
                loadingIndicator.id = 'loading-indicator';
                loadingIndicator.innerText = 'Chargement...';
                loadingIndicator.style.position = 'fixed';
                loadingIndicator.style.top = '1rem';
                loadingIndicator.style.right = '1rem';
                loadingIndicator.style.background = 'var(--primary-color)';
                loadingIndicator.style.color = 'white';
                loadingIndicator.style.padding = '0.5rem 1rem';
                loadingIndicator.style.borderRadius = '0.5rem';
                document.body.appendChild(loadingIndicator);
            });

            document.addEventListener('turbo:submit-end', () => {
                const loadingIndicator = document.getElementById('loading-indicator');
                if (loadingIndicator) {
                    loadingIndicator.remove();
                }
            });

            // Empêcher la soumission du formulaire d'avatar si aucun fichier n'est sélectionné
            if (avatarForm) {
                avatarForm.addEventListener('submit', function(e) {
                    if (avatarInput.files.length === 0) {
                        e.preventDefault();
                        return;
                    }
                });
            }
        });

        // Réinitialise les formulaires après soumission réussie (exemple Turbo)
        document.addEventListener('turbo:frame-render', (event) => {
            const frame = event.target;
            if (frame.querySelector('.form-success-flash')) {
                setTimeout(() => {
                    const successFlash = frame.querySelector('.form-success-flash');
                    if (successFlash) {
                        successFlash.style.opacity = '0';
                        setTimeout(() => {
                            successFlash.remove();
                        }, 300);
                    }
                }, 3000);
            }
        });
    </script>{% endblock %}{% block customScript %}<!-- Toastr JS -->
 <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
 <script>
        document.addEventListener('turbo:submit-end', async (event) => {
            const response = event.detail.fetchResponse;
            
            if (response) {
                try {
                    const data = await response.json;
                    
                    if (data.status === 'success') {
                        toastr.success(data.message);
                        
                        // Mise à jour dynamique de l'avatar
                        if (data.photo) {
                            document.getElementById('profileImage').src = data.photo;
                            document.getElementById('avatarUpdateBtn').classList.add('hidden');
                        }
                        
                        // Réinitialisation des champs de mot de passe
                        const passwordFields = ['currentPassword', 'newPassword', 'confirmPassword'];
                        passwordFields.forEach(field => {
                            const el = document.getElementById(field);
                            if (el) el.value = '';
                        });

                    } else if (data.status === 'error') {
                        toastr.error(data.message);
                    }
                    
                } catch (error) {
                    toastr.error('Une erreur inattendue est survenue');
                }
            }
        });

        // Gestion des erreurs réseau
        document.addEventListener('turbo:submit-end', (event) => {
            if (!event.detail.success && !event.detail.fetchResponse) {
                toastr.error('Erreur de connexion au serveur');
            }
        });

        // Configuration globale de Turbo
        document.addEventListener('turbo:load', () => {
            Turbo.setConfirmMethod(async (message, element) => {
                // Personnalisation des dialogues de confirmation
                return confirm(message);
            });
        });
    </script>{% endblock %}
