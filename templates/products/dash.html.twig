{% extends 'base.html.twig' %}

{% block title %}
	Dashboard | {{ prod.name }}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #tradingChart {
            background: #1a1a1a;
            border-radius: 8px;
            padding: 15px;
        }
        
        .chartjs-render-monitor {
            border: 1px solid #333;
        }
    </style>
{% endblock %}

{% block body %}
	<!-- Chart.js CDN -->
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

	<div class="container-fluid py-5 mt-3">
		<div style="overflow-x: auto; position: relative; height: 60vh;">
			<canvas id="tradingChart"></canvas>
		</div>
	</div>

	<div class="container-fluid mt-4">
		{% if app.user and app.user.isMiningBotActive %}
			<div class="alert alert-success">
				Votre bot de minage est activé. Le minage se fait automatiquement.
			</div>
		{% else %}
			<div class="alert alert-danger">
				Vous n'avez pas le bot de minage. Vous pouvez miner manuellement, mais vous serez responsable de vos gains/pertes.
			</div>
			<div class="btn-group">
				<button id="startManualMining" class="btn btn-primary">Démarrer le minage manuel</button>
				<button id="buyMiningBot" class="btn btn-warning">Acheter le bot de minage</button>
			</div>
		{% endif %}
	</div>
{% endblock %}

{% block customScript %}
<script>
    document.addEventListener('turbo:load', function () {
        const ctx = document.getElementById('tradingChart');
        if (!ctx) return;

        // Récupération des données structurées
        let rawData;
        try {
            rawData = {{ chartData|json_encode|raw }};
            // Validation de la structure
            if (!rawData.price || !rawData.market_cap) {
                throw new Error("Structure de données invalide");
            }
        } catch (e) {
            console.error("Erreur:", e);
            rawData = { price: [], market_cap: [] };
        }

        // Configuration des datasets
        const datasets = [
            {
                label: 'Prix (BTC/USD)',
                data: processData(rawData.price),
                borderColor: '#2962FF',
                borderWidth: 1.5,
                yAxisID: 'y',
                tension: 0.4
            },
            {
                label: 'Capitalisation',
                data: processData(rawData.market_cap),
                borderColor: '#FF6D00',
                borderWidth: 1.5,
                yAxisID: 'y1',
                tension: 0.4
            }
        ];

        // Création du graphique
        new Chart(ctx, {
            type: 'line',
            data: { datasets: datasets },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: { color: '#fff' }
                    },
                    tooltip: {
                        mode: 'index',
                        backgroundColor: '#2A2E35',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        callbacks: {
                            label: (context) => `${context.dataset.label}: $${context.parsed.y.toFixed(2)}`
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'hour',
                            stepSize: 2,
                            displayFormats: { hour: 'HH:mm' }
                        },
                        grid: { color: '#2A2E35' },
                        ticks: { color: '#666' }
                    },
                    y: {
                        position: 'left',
                        grid: { color: '#2A2E35' },
                        ticks: { color: '#666' },
                        title: { 
                            display: true, 
                            text: 'Prix (USD)', 
                            color: '#666' 
                        }
                    },
                    y1: {
                        position: 'right',
                        grid: { drawOnChartArea: false },
                        ticks: { color: '#666' },
                        title: { 
                            display: true, 
                            text: 'Capitalisation (USD)', 
                            color: '#666' 
                        }
                    }
                }
            }
        });

        // Traitement des données
        function processData(rawData) {
            return rawData.map(item => {
                try {
                    const date = new Date(item.x);
                    return isNaN(date) ? null : { 
                        x: date, 
                        y: parseFloat(item.y) 
                    };
                } catch (e) {
                    console.warn("Donnée invalide:", item);
                    return null;
                }
            }).filter(item => item !== null);
        }
    });
</script>
{% endblock %}