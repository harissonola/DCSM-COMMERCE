{% extends 'base.html.twig' %}
  {% block title %}
    Dashboard | {{ prod.name }}
  {% endblock %}
  {% block stylesheets %}
    {{ parent() }}
    <style>
      :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --success-color: #4cc9f0;
        --danger-color: #f72585;
        --dark-color: #1e1e1e;
        --light-color: #f8f9fa;
        --border-radius: 8px;
        --box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
      }
      
      .chart-container {
        position: relative;
        height: 500px;
        width: 100%;
        background: linear-gradient(145deg, #1e1e1e, #2a2a2a);
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        padding: 15px;
        border: 1px solid rgba(255, 255, 255, 0.08);
      }
      
      #tradingChart, #tradingViewChart {
        width: 100% !important;
        height: 100% !important;
        border-radius: var(--border-radius);
      }
      
      .tradingview-style #tradingViewChart {
        background: #131722 !important;
        border-color: #2a2e39;
      }
      
      .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(30, 30, 30, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10;
        border-radius: var(--border-radius);
      }
      
      .chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        background: linear-gradient(145deg, #2a2a2a, #1e1e1e);
        padding: 15px;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        border: 1px solid rgba(255, 255, 255, 0.08);
      }
      
      .chart-price {
        font-size: 2rem;
        font-weight: 700;
        background: linear-gradient(to right, var(--primary-color), var(--success-color));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
      }
      
      .chart-change {
        font-size: 1rem;
        padding: 6px 12px;
        border-radius: 20px;
        font-weight: 600;
      }
      
      .positive {
        color: #4caf50;
        background-color: rgba(76, 175, 80, 0.15);
        border: 1px solid rgba(76, 175, 80, 0.3);
      }
      
      .negative {
        color: #ef5350;
        background-color: rgba(239, 83, 80, 0.15);
        border: 1px solid rgba(239, 83, 80, 0.3);
      }
      
      .time-range-buttons {
        display: flex;
        gap: 8px;
        margin-bottom: 15px;
        flex-wrap: wrap;
      }
      
      .time-range-buttons button {
        background-color: rgba(67, 97, 238, 0.1);
        color: #e0e0e0;
        border: 1px solid rgba(67, 97, 238, 0.3);
        padding: 6px 15px;
        border-radius: 20px;
        cursor: pointer;
        transition: var(--transition);
        font-weight: 500;
      }
      
      .time-range-buttons button:hover {
        background-color: rgba(67, 97, 238, 0.3);
      }
      
      .time-range-buttons button.active {
        background-color: var(--primary-color);
        color: #fff;
        border-color: var(--primary-color);
        transform: translateY(-2px);
      }
      
      .stats-container {
        display: flex;
        gap: 20px;
        margin-top: 20px;
        flex-wrap: wrap;
      }
      
      .stat-card {
        flex: 1;
        min-width: 200px;
        background: linear-gradient(145deg, #2a2a2a, #1e1e1e);
        border-radius: var(--border-radius);
        padding: 20px;
        box-shadow: var(--box-shadow);
        border: 1px solid rgba(255, 255, 255, 0.08);
        transition: var(--transition);
      }
      
      .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
      }
      
      .stat-title {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 8px;
      }
      
      .stat-value {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 5px;
      }
      
      .stat-change {
        font-size: 0.9rem;
        display: inline-block;
        padding: 3px 8px;
        border-radius: 12px;
      }
      
      .stat-icon {
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: rgba(67, 97, 238, 0.2);
        color: var(--primary-color);
      }
      
      .view-selector {
        margin-bottom: 20px;
      }
      
      .view-btn {
        border-radius: 20px !important;
        padding: 8px 20px !important;
        font-weight: 500 !important;
        transition: var(--transition) !important;
      }
      
      @media (max-width: 768px) {
        .stats-container {
          flex-direction: column;
        }
        
        .stat-card {
          min-width: 100%;
        }
        
        .time-range-buttons {
          justify-content: center;
        }
      }
    </style>
  {% endblock %}
  {% block body %}
    <div class="container-fluid py-3 mt-3">
      <div id="chartError" class="alert alert-danger" style="display: none;">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <span>Impossible de charger les données du graphique</span>
      </div>
  
      <!-- Vue Classique -->
      <div id="classicView" class="chart-views active">
        <div class="chart-header">
          <div>
            <h3 class="mb-2">{{ prod.name }} <span class="badge bg-primary">{{ prod.symbol }}</span></h3>
            {% if (chartData.price|length) > 0 %}
              {% set latestPrice = chartData.price[(chartData.price|length) - 1].y %}
              {% set previousPrice = chartData.price[(chartData.price|length) - 2].y ?? latestPrice %}
              {% set priceDiff = latestPrice - previousPrice %}
              {% set pricePercent = priceDiff / previousPrice * 100 %}
              <div class="chart-price">${{ latestPrice|number_format(2) }}</div>
            {% endif %}
          </div>
          {% if (chartData.price|length) > 1 %}
            <div class="chart-change {% if priceDiff >= 0 %}positive{% else %}negative{% endif %}">
              {{ priceDiff|number_format(2) }} ({{ pricePercent|number_format(2) }}%)
            </div>
          {% endif %}
        </div>
        
        <div class="time-range-buttons">
          <button class="range-btn active" data-range="1d">1J</button>
          <button class="range-btn" data-range="5d">5J</button>
          <button class="range-btn" data-range="1m">1M</button>
          <button class="range-btn" data-range="ytd">YTD</button>
          <button class="range-btn" data-range="1y">1A</button>
          <button class="range-btn" data-range="5y">5A</button>
          <button class="range-btn" data-range="max">MAX</button>
        </div>
        
        <div class="chart-container">
          <div class="loading-overlay" id="chartLoading">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Chargement...</span>
            </div>
          </div>
          <canvas id="tradingChart"></canvas>
        </div>
        
        <!-- Stats Cards -->
        <div class="stats-container">
          <div class="stat-card">
            <div class="stat-title">
              <div class="stat-icon">
                <i class="fas fa-dollar-sign"></i>
              </div>
              Valeur actuelle
            </div>
            <div class="stat-value text-primary">${{ latestPrice|number_format(2) }}</div>
            <div class="stat-change {% if priceDiff >= 0 %}positive{% else %}negative{% endif %}">
              {{ priceDiff|number_format(2) }} ({{ pricePercent|number_format(2) }}%)
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-title">
              <div class="stat-icon">
                <i class="fas fa-flag"></i>
              </div>
              Prix de départ
            </div>
            <div class="stat-value text-info">
              {% if (chartData.price|length) > 0 %}
                ${{ chartData.price[0].y|number_format(2) }}
              {% else %}
                N/A
              {% endif %}
            </div>
            <div class="stat-change">
              {% if (chartData.price|length) > 1 %}
                {% set totalChange = latestPrice - chartData.price[0].y %}
                {% set totalPercent = (totalChange / chartData.price[0].y) * 100 %}
                <span class="{% if totalChange >= 0 %}positive{% else %}negative{% endif %}">
                  {{ totalChange|number_format(2) }} ({{ totalPercent|number_format(2) }}%)
                </span>
              {% endif %}
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-title">
              <div class="stat-icon">
                <i class="fas fa-chart-line"></i>
              </div>
              Fluctuation (24h)
            </div>
            <div class="stat-value">
              {% if (chartData.price|length) > 1 %}
                {% set high24h = chartData.price|slice(-24)|max(attribute='y') %}
                {% set low24h = chartData.price|slice(-24)|min(attribute='y') %}
                ${{ (high24h - low24h)|number_format(2) }}
              {% else %}
                N/A
              {% endif %}
            </div>
            <div class="stat-change">
              {% if (chartData.price|length) > 1 %}
                <span class="text-muted">
                  Haut: ${{ high24h|number_format(2) }} | Bas: ${{ low24h|number_format(2) }}
                </span>
              {% endif %}
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-title">
              <div class="stat-icon">
                <i class="fas fa-chart-pie"></i>
              </div>
              Capitalisation
            </div>
            <div class="stat-value">
              {% if prod.marketCap is defined and prod.marketCap %}
                ${{ prod.marketCap|number_format(0, '.', ',') }}
              {% else %}
                N/A
              {% endif %}
            </div>
            <div class="stat-change">
              {% if prod.volume is defined and prod.volume %}
                <span class="text-muted">Volume: ${{ prod.volume|number_format(0, '.', ',') }}</span>
              {% endif %}
            </div>
          </div>
        </div>
      </div>
    </div>
  {% endblock %}
  {% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const ctx = document.getElementById('tradingChart');
        const errorElement = document.getElementById('chartError');
        const productSlug = '{{ prod.slug }}';
        let chartInstance = null;
  
        // Initialisation des graphiques
        function initCharts() {
          const initialData = {{ chartData|json_encode|raw }};
          if (initialData?.price?.length > 0) {
            initChart(initialData);
            updatePriceDisplay(initialData);
          } else {
            showError("Aucune donnée disponible");
          }
        }
  
        function initChart(data) {
          if (chartInstance) chartInstance.destroy();
          
          const gradient = ctx.getContext('2d').createLinearGradient(0, 0, 0, 400);
          gradient.addColorStop(0, 'rgba(67, 97, 238, 0.3)');
          gradient.addColorStop(1, 'rgba(67, 97, 238, 0)');
          
          chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
              datasets: [{
                label: 'Price',
                data: processData(data.price),
                borderColor: '#4361ee',
                borderWidth: 2,
                backgroundColor: gradient,
                fill: true,
                tension: 0.4,
                pointRadius: 0
              }]
            },
            options: getChartOptions()
          });
        }
  
        function processData(rawData) {
          return rawData.map(item => ({
            x: new Date(item.x),
            y: item.y
          }));
        }
  
        function getChartOptions() {
          return {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { display: false },
              tooltip: {
                mode: 'nearest',
                intersect: false,
                backgroundColor: '#2a2a2a',
                titleColor: '#fff',
                bodyColor: 'rgba(255, 255, 255, 0.7)',
                borderColor: '#4361ee',
                borderWidth: 1,
                padding: 12,
                callbacks: {
                  label: (context) => `$${context.parsed.y.toFixed(2)}`,
                  title: (items) => new Date(items[0].parsed.x).toLocaleString()
                }
              }
            },
            scales: {
              x: {
                type: 'time',
                time: {
                  tooltipFormat: 'PPpp'
                },
                grid: { 
                  display: false,
                  color: 'rgba(255, 255, 255, 0.1)'
                },
                ticks: {
                  color: 'rgba(255, 255, 255, 0.7)'
                }
              },
              y: {
                position: 'right',
                grid: { 
                  color: 'rgba(255, 255, 255, 0.1)'
                },
                ticks: {
                  color: 'rgba(255, 255, 255, 0.7)',
                  callback: (value) => `$${value}`
                }
              }
            },
            interaction: {
              intersect: false,
              mode: 'index'
            }
          };
        }
  
        function updatePriceDisplay(data) {
          if (!data.price || data.price.length === 0) return;
          const latestPrice = data.price[data.price.length - 1].y;
          const previousPrice = data.price[data.price.length - 2]?.y || latestPrice;
          const priceDiff = latestPrice - previousPrice;
          const pricePercent = (priceDiff / previousPrice) * 100;
  
          // Mise à jour des éléments d'affichage
          document.querySelectorAll('.chart-price').forEach(el => {
            el.textContent = `$${latestPrice.toFixed(2)}`;
          });
          document.querySelectorAll('.chart-change').forEach(el => {
            el.textContent = `${priceDiff.toFixed(2)} (${pricePercent.toFixed(2)}%)`;
            el.className = `chart-change ${priceDiff >= 0 ? 'positive' : 'negative'}`;
          });
          
          // Mise à jour des cartes de stats
          if (data.price.length > 1) {
            const high24h = data.price.slice(-24).reduce((max, item) => Math.max(max, item.y), -Infinity);
            const low24h = data.price.slice(-24).reduce((min, item) => Math.min(min, item.y), Infinity);
            
            document.querySelectorAll('.stat-card:nth-child(1) .stat-value').forEach(el => {
              el.textContent = `$${latestPrice.toFixed(2)}`;
            });
            
            document.querySelectorAll('.stat-card:nth-child(3) .stat-value').forEach(el => {
              el.textContent = `$${(high24h - low24h).toFixed(2)}`;
            });
            
            document.querySelectorAll('.stat-card:nth-child(3) .stat-change span').forEach(el => {
              el.textContent = `Haut: $${high24h.toFixed(2)} | Bas: $${low24h.toFixed(2)}`;
            });
          }
        }
  
        async function updateChart(range) {
          try {
            document.getElementById('chartLoading').style.display = 'flex';
            errorElement.style.display = 'none';
            const response = await fetch(`/products/${productSlug}/dashboard/data?range=${range}`);
            const newData = await response.json();
            
            if (chartInstance) {
              chartInstance.data.datasets[0].data = processData(newData.price);
              chartInstance.update();
            }
            
            updatePriceDisplay(newData);
          } catch (error) {
            showError(`Erreur: ${error.message}`);
          } finally {
            document.getElementById('chartLoading').style.display = 'none';
          }
        }
  
        function showError(message) {
          errorElement.style.display = 'block';
          errorElement.querySelector('span').textContent = message;
        }
  
        // Gestion des boutons de plage de temps
        document.querySelectorAll('.range-btn').forEach(button => {
          button.addEventListener('click', function() {
            document.querySelectorAll('.range-btn').forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            updateChart(this.dataset.range);
          });
        });
  
        // Initialisation
        initCharts();
      });
    </script>
  {% endblock %}