{% extends 'base.html.twig' %}

{% block title %}
	{{ app.user.fname }}
	{{ app.user.lname }}
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<!-- Toastr CSS -->
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
	<style>
		.error-message {
			color: #ef4444;
			font-size: 0.875rem;
			margin-top: 0.25rem;
		}
		.form-group.has-error input {
			border-color: #ef4444;
		}
	</style>
{% endblock %}

{% block body %}
	<div
		class="settings-wrapper" data-theme="dark">
		<!-- Sidebar Navigation -->
		<aside
			class="settings-sidebar"><!-- ... (identique) ... -->
		</aside>

		<!-- Main Content -->
		<main
			class="settings-content">
			<!-- Profile Section -->
			<section class="profile-section" id="profile-section">
				<div class="profile-header">
					<h2>Profil</h2>
					<p>Gérez vos informations personnelles et vos préférences.</p>
				</div>

				<div
					class="profile-grid">
					<!-- Avatar Upload -->
					<div class="avatar-card">
						<form id="avatarForm" enctype="multipart/form-data">
							<div class="avatar-preview">
								<img src="{{ app.user.photo }}" alt="Avatar" id="profileImage">
								<label class="avatar-edit">
									<i class="bi bi-camera"></i>
									<input type="file" id="avatarUpload" name="avatar" accept="image/*" class="hidden-input">
								</label>
							</div>
							<div id="avatarErrors" class="error-message"></div>
							<button type="submit" class="btn-save">Mettre à jour l'avatar</button>
						</form>
					</div>

					<!-- Personal Info Form -->
					<div class="form-card">
						<h4>Informations personnelles</h4>
						<form id="personalInfoForm">
							<input type="hidden" name="_csrf_token" value="{{ csrf_token('update_settings') }}">
							<div class="form-group">
								<label for="username">Nom d'utilisateur</label>
								<input type="text" id="username" name="username" value="{{ app.user.username }}" required>
								<div id="usernameError" class="error-message"></div>
							</div>
							<div class="form-group">
								<label for="email">Email</label>
								<input type="email" id="email" name="email" value="{{ app.user.email }}" required>
								<div id="emailError" class="error-message"></div>
							</div>
							<button type="submit" class="btn-save">Sauvegarder</button>
						</form>
					</div>
				</div>
			</section>

			<!-- Security Section -->
			<section class="security-section" id="security-section">
				<h4>Sécurité du compte</h4>
				<div class="form-card">
					<form id="securityForm">
						<input type="hidden" name="_csrf_token" value="{{ csrf_token('update_settings') }}">
						<div class="form-group">
							<label for="currentPassword">Mot de passe actuel</label>
							<input type="password" id="currentPassword" name="currentPassword" required>
							<div id="currentPasswordError" class="error-message"></div>
						</div>
						<div class="form-group">
							<label for="newPassword">Nouveau mot de passe</label>
							<input type="password" id="newPassword" name="newPassword" required>
							<div id="newPasswordError" class="error-message"></div>
						</div>
						<div class="form-group">
							<label for="confirmPassword">Confirmer le mot de passe</label>
							<input type="password" id="confirmPassword" name="confirmPassword" required>
							<div id="confirmPasswordError" class="error-message"></div>
						</div>
						<button type="submit" class="btn-save">Changer le mot de passe</button>
					</form>
				</div>
			</section>

			<!-- Notifications Section -->
			<section class="notifications-section" id="notifications-section">
				<h4>Préférences de notifications</h4>
				<div class="form-card">
					<form id="notificationsForm">
						<input type="hidden" name="_csrf_token" value="{{ csrf_token('update_settings') }}">
						<div class="form-group toggle-group">
							<label>Notifications par email</label>
							<label class="switch">
								<input type="checkbox" name="emailNotifications" {% if app.user.emailNotifications %} checked {% endif %}>
								<span class="slider"></span>
							</label>
						</div>
						<div class="form-group toggle-group">
							<label>Notifications push</label>
							<label class="switch">
								<input type="checkbox" name="pushNotifications" {% if app.user.pushNotifications %} checked {% endif %}>
								<span class="slider"></span>
							</label>
						</div>
						<button type="submit" class="btn-save">Enregistrer</button>
					</form>
				</div>
			</section>
		</main>
	</div>
{% endblock %}

{% block javascripts %}
	{{ parent() }}
 <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
	 <script>
	document.addEventListener('DOMContentLoaded', () => {
	    const forms = {
	        avatar: document.getElementById('avatarForm'),
	        personalInfo: document.getElementById('personalInfoForm'),
	        security: document.getElementById('securityForm'),
	        notifications: document.getElementById('notificationsForm')
	    };
	
	    const clearErrors = (form) => {
	        form.querySelectorAll('.error-message').forEach(el => el.textContent = '');
	        form.querySelectorAll('.form-group').forEach(el => el.classList.remove('has-error'));
	    };
	
	    const handleResponse = (form, response) => {
	        clearErrors(form);
	        if (response.status === 'success') {
	            toastr.success(response.message);
	            if (response.photo) {
	                document.getElementById('profileImage').src = response.photo;
	            }
	            if (form === forms.security) {
	                form.reset();
	            }
	        } else {
	            toastr.error(response.message);
	            if (response.errors) {
	                Object.entries(response.errors).forEach(([field, message]) => {
	                    const errorEl = form.querySelector(`#${field}Error`);
	                    if (errorEl) {
	                        errorEl.textContent = message;
	                        errorEl.closest('.form-group').classList.add('has-error');
	                    }
	                });
	            }
	        }
	    };
	
	    const handleFormSubmit = async (form, formData) => {
	        try {
	            const response = await fetch('{{ path('app_user_settings_update') }}', {
	                method: 'POST',
	                body: formData
	            });
	
	            const data = await response.json();
	            handleResponse(form, data);
	        } catch (error) {
	            toastr.error('Erreur de connexion au serveur');
	        }
	    };
	
	    // Avatar Form
	    forms.avatar.addEventListener('submit', async (e) => {
	        e.preventDefault();
	        const formData = new FormData();
	        formData.append('_csrf_token', '{{ csrf_token('update_settings') }}');
	        formData.append('avatar', forms.avatar.querySelector('#avatarUpload').files[0]);
	        
	        await handleFormSubmit(forms.avatar, formData);
	    });
	
	    // Personal Info Form
	    forms.personalInfo.addEventListener('submit', async (e) => {
	        e.preventDefault();
	        const formData = new FormData(e.target);
	        await handleFormSubmit(forms.personalInfo, formData);
	    });
	
	    // Security Form
	    forms.security.addEventListener('submit', async (e) => {
	        e.preventDefault();
	        const formData = new FormData(e.target);
	        await handleFormSubmit(forms.security, formData);
	    });
	
	    // Notifications Form
	    forms.notifications.addEventListener('submit', async (e) => {
	        e.preventDefault();
	        const formData = new FormData(e.target);
	        await handleFormSubmit(forms.notifications, formData);
	    });
	});
	</script>
{% endblock %}
