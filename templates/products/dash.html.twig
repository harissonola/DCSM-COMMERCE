{% extends 'base.html.twig' %}
{% block title %}
  Dashboard | {{ prod.name }}
{% endblock %}
{% block stylesheets %}
  {{ parent() }}
  <style>
    .chart-container {
      position: relative;
      height: 500px;
      width: 100%;
    }
    #tradingChart,
    #tradingViewChart {
      width: 100% !important;
      height: 100% !important;
      background: #1e1e1e;
      border-radius: 8px;
      padding: 15px;
      border: 1px solid #333;
    }
    .tradingview-style #tradingViewChart {
      background: #131722 !important;
      border-color: #2a2e39;
    }
    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(30, 30, 30, 0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10;
    }
    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    .chart-price {
      font-size: 2rem;
      font-weight: 500;
    }
    .chart-change {
      font-size: 1rem;
      padding: 4px 8px;
      border-radius: 4px;
    }
    .positive {
      color: #4caf50;
      background-color: rgba(76, 175, 80, 0.2);
    }
    .negative {
      color: #ef5350;
      background-color: rgba(239, 83, 80, 0.2);
    }
    .time-range-buttons {
      display: flex;
      gap: 8px;
      margin-bottom: 15px;
    }
    .time-range-buttons button {
      background-color: #2e2e2e;
      color: #e0e0e0;
      border: 1px solid #444;
      padding: 6px 12px;
      border-radius: 4px;
      cursor: pointer;
    }
    .time-range-buttons button.active {
      background-color: #1a73e8;
      color: #fff;
      border-color: #1a73e8;
    }
    .view-selector {
      display: flex;
      gap: 8px;
      margin-bottom: 15px;
    }
    .chart-views {
      display: none;
    }
    .chart-views.active {
      display: block;
    }
  </style>
{% endblock %}
{% block body %}
  <div class="container-fluid py-3 mt-3">
    <div class="view-selector">
      <button class="view-btn active btn btn-primary" data-view="classic">Vue Classique</button>
      <button class="view-btn btn btn-info" data-view="tradingview">Style TradingView</button>
    </div>
    <div id="chartError" class="alert alert-danger" style="display: none;">
      <i class="fas fa-exclamation-triangle me-2"></i>
      <span>Impossible de charger les données du graphique</span>
    </div>
    <!-- Vue Classique -->
    <div id="classicView" class="chart-views active">
      <div class="chart-header">
        <div>
          <h3>{{ prod.name }}</h3>
          {% if (chartData.price|length) > 0 %}
            {% set latestPrice = chartData.price[(chartData.price|length) - 1].y %}
            {% set previousPrice = chartData.price[(chartData.price|length) - 2].y ?? latestPrice %}
            {% set priceDiff = latestPrice - previousPrice %}
            {% set pricePercent = priceDiff / previousPrice * 100 %}
            <div class="chart-price">${{ latestPrice|number_format(2) }}</div>
          {% endif %}
        </div>
        {% if (chartData.price|length) > 1 %}
          <div class="chart-change {% if priceDiff >= 0 %}

            {% endif %}">{{ pricePercent|number_format(2) }}% ({{ priceDiff|number_format(2) }})</div>
        {% endif %}
      </div>
      <div class="time-range-buttons">
        <button class="range-btn active" data-range="1d">1J</button>
        <button class="range-btn" data-range="5d">5J</button>
        <button class="range-btn" data-range="1m">1M</button>
        <button class="range-btn" data-range="ytd">YTD</button>
        <button class="range-btn" data-range="1y">1A</button>
        <button class="range-btn" data-range="5y">5A</button>
        <button class="range-btn" data-range="max">MAX</button>
      </div>
      <div class="chart-container">
        <div class="loading-overlay" id="chartLoading">
          <div class="spinner-border text-light" role="status">
            <span class="visually-hidden">Chargement...</span>
          </div>
        </div>
        <canvas id="tradingChart"></canvas>
      </div>
    </div>
    <!-- Vue TradingView -->
    <div id="TradingviewView" class="chart-views">
      <div class="chart-header">
        <div>
          <h3>{{ prod.name }}</h3>
          {% if (chartData.price|length) > 0 %}
            {% set latestPrice = chartData.price[(chartData.price|length) - 1].y %}
            {% set previousPrice = chartData.price[(chartData.price|length) - 2].y ?? latestPrice %}
            {% set priceDiff = latestPrice - previousPrice %}
            {% set pricePercent = priceDiff / previousPrice * 100 %}
            <div class="chart-price">${{ latestPrice|number_format(2) }}</div>
            <div class="chart-change {% if priceDiff >= 0 %}

              {% endif %}">{{ priceDiff|number_format(2) }} ({{ pricePercent|number_format(2) }}%)</div>
          {% endif %}
        </div>
      </div>
      <div class="time-range-buttons tradingview-time-ranges">
        <button class="range-btn active" data-range="1d">1J</button>
        <button class="range-btn" data-range="5d">5J</button>
        <button class="range-btn" data-range="1m">1M</button>
        <button class="range-btn" data-range="ytd">YTD</button>
        <button class="range-btn" data-range="1y">1A</button>
        <button class="range-btn" data-range="5y">5A</button>
        <button class="range-btn" data-range="max">MAX</button>
      </div>
      <div class="chart-container tradingview-style">
        <div class="loading-overlay" id="tradingViewLoading">
          <div class="spinner-border text-light" role="status">
            <span class="visually-hidden">Chargement...</span>
          </div>
        </div>
        <canvas id="tradingViewChart"></canvas>
      </div>
    </div>
  </div>
{% endblock %}
{% block javascripts %}
  {{ parent() }}
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
  <script>
      document.addEventListener('DOMContentLoaded', function() {
        const ctx = document.getElementById('tradingChart');
        const tradingViewCtx = document.getElementById('tradingViewChart');
        const errorElement = document.getElementById('chartError');
        const productSlug = '{{ prod.slug }}';
        let chartInstance = null;
        let tradingViewChartInstance = null;
  
        // Initialisation des graphiques
        function initCharts() {
          const initialData = {{ chartData|json_encode|raw }};
          if (initialData?.price?.length > 0) {
            initChart(initialData);
            initTradingViewChart(initialData);
            updatePriceDisplay(initialData);
          } else {
            showError("Aucune donnée disponible");
          }
        }
  
        function initChart(data) {
          if (chartInstance) chartInstance.destroy();
          chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
              datasets: [{
                label: 'Price',
                data: processData(data.price),
                borderColor: '#1a73e8',
                borderWidth: 2,
                backgroundColor: 'rgba(26, 115, 232, 0.1)',
                fill: true,
                tension: 0.4,
                pointRadius: 0
              }]
            },
            options: getChartOptions()
          });
        }
  
        function initTradingViewChart(data) {
          if (tradingViewChartInstance) tradingViewChartInstance.destroy();
          tradingViewChartInstance = new Chart(tradingViewCtx, {
            type: 'line',
            data: {
              datasets: [{
                label: 'Price',
                data: processData(data.price),
                borderColor: '#2962FF',
                borderWidth: 2,
                backgroundColor: 'rgba(41, 98, 255, 0.1)',
                fill: true,
                tension: 0.1,
                pointRadius: 0
              }]
            },
            options: getTradingViewChartOptions()
          });
        }
  
        function processData(rawData) {
          return rawData.map(item => ({
            x: new Date(item.x),
            y: item.y
          }));
        }
  
        function getChartOptions() {
          return {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { display: false },
              tooltip: {
                mode: 'nearest',
                intersect: false,
                backgroundColor: '#1e1e1e',
                titleColor: '#e0e0e0',
                bodyColor: '#b0b0b0',
                borderColor: '#333',
                borderWidth: 1,
                callbacks: {
                  label: (context) => `$${context.parsed.y.toFixed(2)}`,
                  title: (items) => new Date(items[0].parsed.x).toLocaleString()
                }
              }
            },
            scales: {
              x: {
                type: 'time',
                time: {
                  tooltipFormat: 'PPpp'
                },
                grid: { display: false }
              },
              y: {
                position: 'right',
                grid: { color: '#333' },
                ticks: {
                  callback: (value) => `$${value}`
                }
              }
            }
          };
        }
  
        function getTradingViewChartOptions() {
          return {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { display: false },
              tooltip: {
                mode: 'nearest',
                intersect: false,
                backgroundColor: '#131722',
                titleColor: '#b2b5be',
                bodyColor: '#fff',
                borderColor: '#2962FF',
                borderWidth: 1,
                callbacks: {
                  label: (context) => `$${context.parsed.y.toFixed(2)}`,
                  title: (items) => new Date(items[0].parsed.x).toLocaleString()
                }
              }
            },
            scales: {
              x: {
                type: 'time',
                time: {
                  tooltipFormat: 'PPpp'
                },
                grid: { 
                  display: false,
                  color: '#2a2e39'
                },
                ticks: { 
                  color: '#b2b5be'
                }
              },
              y: {
                position: 'right',
                grid: { 
                  color: '#2a2e39'
                },
                ticks: {
                  color: '#b2b5be',
                  callback: (value) => `$${value}`
                }
              }
            }
          };
        }
  
        function updatePriceDisplay(data) {
          if (!data.price || data.price.length === 0) return;
          const latestPrice = data.price[data.price.length - 1].y;
          const previousPrice = data.price[data.price.length - 2]?.y || latestPrice;
          const priceDiff = latestPrice - previousPrice;
          const pricePercent = (priceDiff / previousPrice) * 100;
  
          // Mise à jour des éléments d'affichage
          document.querySelectorAll('.chart-price').forEach(el => {
            el.textContent = `$${latestPrice.toFixed(2)}`;
          });
          document.querySelectorAll('.chart-change').forEach(el => {
            el.textContent = `${priceDiff.toFixed(2)} (${pricePercent.toFixed(2)}%)`;
            el.className = `chart-change ${priceDiff >= 0 ? 'positive' : 'negative'}`;
          });
        }
  
        async function updateChart(range) {
          try {
            document.getElementById('chartLoading').style.display = 'flex';
            errorElement.style.display = 'none';
            const response = await fetch(`/products/${productSlug}/dashboard/data?range=${range}`);
            const newData = await response.json();
            if (chartInstance) {
              chartInstance.data.datasets[0].data = processData(newData.price);
              chartInstance.update();
            }
            if (tradingViewChartInstance) {
              tradingViewChartInstance.data.datasets[0].data = processData(newData.price);
              tradingViewChartInstance.update();
            }
            updatePriceDisplay(newData);
          } catch (error) {
            showError(`Erreur: ${error.message}`);
          } finally {
            document.getElementById('chartLoading').style.display = 'none';
          }
        }
  
        function showError(message) {
          errorElement.style.display = 'block';
          errorElement.querySelector('span').textContent = message;
        }
  
        // Gestion des boutons de vue
        document.querySelectorAll('.view-btn').forEach(button => {
          button.addEventListener('click', function() {
            document.querySelectorAll('.view-btn').forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            document.querySelectorAll('.chart-views').forEach(view => view.classList.remove('active'));
  
            const viewId = `${this.dataset.view.charAt(0).toUpperCase() + this.dataset.view.slice(1)}View`;
            const viewElement = document.getElementById(viewId);
            if (viewElement) {
              viewElement.classList.add('active');
              document.body.classList.toggle('tradingview-style', this.dataset.view === 'tradingview');
            } else {
              console.error(`Element with ID "${viewId}" not found.`);
            }
          });
        });
  
        // Gestion des boutons de plage de temps
        document.querySelectorAll('.range-btn').forEach(button => {
          button.addEventListener('click', function() {
            document.querySelectorAll('.range-btn').forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            updateChart(this.dataset.range);
          });
        });
  
        // Initialisation
        initCharts();
      });
    </script>
{% endblock %}
