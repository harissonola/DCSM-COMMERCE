{% extends 'base.html.twig' %}

{% block title %}
	{{ shop.name }}
{% endblock %}

{% block body %}
	<style>
		.hero {
			padding: 100px 20px;
			text-align: center;
			background: no-repeat center center/cover;
			position: relative;
			background: linear-gradient(94.41deg, #193d91 -6.4%, #091f51 105.25%);
		}

		.prods {
			padding: 100px 20px;
		}

		.prod-card {
			background: rgba(255, 255, 255, 0.1);
			border: none;
			border-radius: 10px;
			transition: transform 0.3s;
			margin-top: 30px;
		}

		.prod-card img {
			border-top-left-radius: 10px;
			border-top-right-radius: 10px;
		}

		.prod-card:hover {
			transform: translateY(-10px);
		}

		.prod-card h3 {
			margin-top: 15px;
			margin-bottom: 15px;
		}

		/* Skeleton Loader en mode dark */
		.skeleton {
			background: linear-gradient(90deg, #333 25%, #444 50%, #333 75%);
			background-size: 200% 100%;
			animation: loading 1.5s infinite linear;
			border-radius: 10px;
			position: relative;
		}

		@keyframes loading {
			0% {
				background-position: 200% 0;
			}
			100% {
				background-position: -200% 0;
			}
		}

		.skeleton-box {
			width: 100%;
			height: 200px;
			background-color: #2a2a2a;
			margin-bottom: 20px;
		}

		.skeleton-text {
			height: 10px;
			width: 80%;
			margin-bottom: 5px;
			background-color: #2a2a2a;
			border-radius: 5px;
		}

		.skeleton-title {
			height: 20px;
			width: 60%;
			margin-bottom: 15px;
		}
		.skeleton-subtitle {
			height: 15px;
			width: 40%;
			margin-bottom: 10px;
		}
		.skeleton-description {
			height: 15px;
			width: 80%;
			margin-bottom: 20px;
		}
		.btn-skeleton {
			width: 120px;
			height: 35px;
			background-color: #2a2a2a;
			border-radius: 5px;
			margin-top: 10px;
		}
	</style>

	<section style="overflow: hidden;" class="hero align-items-center justify-content-center text-center">
		<div class="container" data-aos-duration="2000" data-aos="slide-left" data-aos-delay="100">
			<h1 class="text-primary" data-aos-duration="2000" data-aos="slide-down" data-aos-delay="700">{{ shop.name }}</h1>
			<p class="text-muted" data-aos-duration="2000" data-aos="slide-up" data-aos-delay="900">{{ shop.description }}</p>
		</div>
	</section>

	<section class="prods" id="prods">
		<div class="row" id="prod-container">
			{% if prods %}
				{% for prod in prods %}
					<div class="col-md-4" id="prod-card-{{ loop.index }}">
						<div class="card prod-card skeleton">
							<div class="skeleton-box"></div>
							<div class="card-body">
								<div class="skeleton-title skeleton-text"></div>
								<div class="skeleton-subtitle skeleton-text"></div>
								<div class="skeleton-description skeleton-text"></div>
								<div class="btn-skeleton"></div>
							</div>
						</div>
					</div>
				{% endfor %}
			{% else %}
				<h5 class="text-center text-danger">Aucun produit disponible pour le moment.</h5>
			{% endif %}
		</div>
	</section>

	 <script>
			document.addEventListener('turbo:load', function() {
				{% if not is_granted('ROLE_ADMIN') %}
					// Pour un utilisateur non-admin, on définit le solde (en USD)
					const userBalance = parseFloat('{{ app.user.balance|default(0) }}');
				{% endif %}
		
				// Création d'un tableau JavaScript avec les informations des produits
				const products = [
					{% for prod in prods %}
					{
						id: {{ loop.index }},
						name: "{{ prod.name }}",
						// On stocke le prix formaté en USD sans le symbole $
						priceUSD: parseFloat("{{ prod.price|format_currency('USD')|replace({'$': '', ' ': ''}) }}"),
						displayPrice: "{{ prod.price|format_currency('USD') }}", // prix affiché
						slug: "{{ prod.slug }}",
						image: "{{ prod.image }}",
						description: "{{ prod.description }}",
						url: "{% if is_granted('ROLE_ADMIN') %}{{ path('app_products_dashboard', { slug: prod.slug }) }}{% else %}{{ path('app_products_sell_product', { slug: prod.slug }) }}{% endif %}"
					},
					{% endfor %}
				];
		
				// Remplacer le contenu des cartes après 1 seconde
				setTimeout(() => {
					products.forEach(product => {
						const card = document.getElementById(`prod-card-${product.id}`);
						let buttonHtml = '';
						{% if is_granted('ROLE_ADMIN') %}
							buttonHtml = `<a href="${product.url}" class="btn btn-primary float-end">Visualiser</a>`;
						{% else %}
							buttonHtml = `<button data-url="${product.url}" data-price="${product.priceUSD}" data-slug="${product.slug}" class="btn btn-primary float-end acheter-btn">Acheter</button>`;
						{% endif %}
		
						const content = `
							<div class="prod-card card">
								<img src="${product.image}" class="card-img-top" alt="${product.name}-IMG-${product.id}" style="max-height: 273px; object-fit: cover;" />
								<div class="card-body">
									<h5 class="card-title">${product.name}</h5>
									<h6 class="card-subtitle mb-2 text-muted">${product.displayPrice}</h6>
									<p class="card-text">${product.description}</p>
									${buttonHtml}
								</div>
							</div>
						`;
						card.classList.remove('skeleton');
						card.innerHTML = content;
					});
		
					{% if not is_granted('ROLE_ADMIN') %}
					// Pour les utilisateurs non-admin, intercepter le clic sur le bouton "Acheter"
					const acheterButtons = document.querySelectorAll('.acheter-btn');
					acheterButtons.forEach(btn => {
						btn.addEventListener('click', function(e) {
							e.preventDefault();
							const productUrl = this.getAttribute('data-url');
							const productPrice = parseFloat(this.getAttribute('data-price'));
							
							// Vérifier si le solde est suffisant (comparaison directement en USD)
							if (userBalance >= productPrice) {
								fetch(productUrl, {
									method: 'POST',
									headers: {
										'Content-Type': 'application/json',
										'X-Requested-With': 'XMLHttpRequest'
									},
									body: JSON.stringify({ slug: this.getAttribute('data-slug') })
								})
								.then(response => response.json())
								.then(data => {
									if (data.success) {
										alert("Achat réussi !");
										window.location.reload();
									} else {
										alert("Erreur lors de l'achat : " + data.message);
									}
								})
								.catch(error => {
									console.error('Error:', error);
									alert("Une erreur s'est produite lors de l'achat.");
								});
							} else {
								alert('Votre solde est insuffisant pour acheter ce produit.');
							}
						});
					});
					{% endif %}
				}, 1000);
			});
		</script>
{% endblock %}
