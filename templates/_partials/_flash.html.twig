<!-- Turbo Loader -->
    <script>
        document.addEventListener('turbo:load', function() {
            AOS.init();
            
            document.addEventListener('turbo:before-fetch-request', function() {
                document.getElementById('custom-spinner').classList.remove('hidden');
            });
            
            document.addEventListener('turbo:before-fetch-response', function() {
                document.getElementById('custom-spinner').classList.add('hidden');
            });
        });
        
        // Fonction pour afficher des alertes personnalisées
        function showAlert(options) {
            const container = document.getElementById('customAlertContainer');
            const alertId = 'alert-' + Date.now();
            const alertEl = document.createElement('div');
            
            alertEl.id = alertId;
            alertEl.className = `custom-alert ${options.type || 'info'}`;
            alertEl.innerHTML = `
                <div class="d-flex align-items-center p-3 text-white">
                    <div class="flex-grow-1">
                        <h6 class="mb-0">${options.title || 'Notification'}</h6>
                        <div class="small">${options.text || ''}</div>
                    </div>
                    <button type="button" class="btn-close btn-close-white ms-2" onclick="document.getElementById('${alertId}').remove()"></button>
                </div>
            `;
            
            container.appendChild(alertEl);
            setTimeout(() => alertEl.classList.add('show'), 10);
            
            if (options.timer) {
                setTimeout(() => {
                    alertEl.classList.remove('show');
                    setTimeout(() => alertEl.remove(), 300);
                }, options.timer);
            }
        }
        
        // Fonction pour afficher une confirmation
        function showConfirm(options) {
            return new Promise((resolve) => {
                const modalId = 'confirmModal-' + Date.now();
                const modalEl = document.createElement('div');
                
                modalEl.id = modalId;
                modalEl.className = 'modal fade';
                modalEl.innerHTML = `
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header bg-${options.type || 'primary'} text-white">
                                <h5 class="modal-title">${options.title || 'Confirmation'}</h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                ${options.text || 'Êtes-vous sûr de vouloir continuer ?'}
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">${options.cancelText || 'Annuler'}</button>
                                <button type="button" class="btn btn-${options.type || 'primary'}" id="${modalId}-confirm">${options.confirmText || 'Confirmer'}</button>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modalEl);
                const modal = new bootstrap.Modal(modalEl);
                modal.show();
                
                document.getElementById(`${modalId}-confirm`).addEventListener('click', () => {
                    modal.hide();
                    resolve(true);
                });
                
                modalEl.addEventListener('hidden.bs.modal', () => {
                    modalEl.remove();
                    resolve(false);
                });
            });
        }
    </script>

    {% if app.user and app.user.isVerified == 0 %}
        <script>
        document.addEventListener('turbo:load', function () {
            Swal.fire({
                icon: 'warning',
                title: 'Compte inactif',
                html: `
                    Votre compte n'est pas activé. Veuillez vérifier votre boîte mail !
                    <div style="margin-top: 10px;">
                        <a href="{{ path('app_verify_email_send') }}" class="btn btn-light btn-sm">
                            <i class="fas fa-paper-plane me-2"></i>Renvoyer le lien
                        </a>
                    </div>
                `,
                showConfirmButton: true, // Bouton "OK" visible
                toast: true,
                position: 'top-end'
            });
        });
        </script>
        {% endif %}
        
        {% for label, messages in app.flashes %}
        <script>
        document.addEventListener('turbo:load', function() {
            {% for message in messages %}
                // Déterminer le type d'alerte SweetAlert2
                let swalType = 'info';
                if (['success', 'info', 'warning', 'danger', 'error'].includes('{{ label }}')) {
                    swalType = '{{ label }}' === 'error' ? 'error' : '{{ label }}';
                }
        
                // Afficher l'alerte SweetAlert2
                Swal.fire({
                    icon: swalType,
                    title: '{{ label|capitalize|replace({'_': ' '}) }}',
                    text: `{{ message|raw }}`,
                    showConfirmButton: true, // Bouton "OK" visible
                    toast: true,
                    position: 'top-end'
                });
            {% endfor %}
        });
        </script>
        {% endfor %}
        
        {% if app.request.query.get('error') %}
        <script>
        document.addEventListener('turbo:load', function() {
            Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: `{{ app.request.query.get('error')|raw }}`,
                showConfirmButton: true, // Bouton "OK" visible
                toast: true,
                position: 'top-end'
            });
        });
        </script>
        {% endif %}